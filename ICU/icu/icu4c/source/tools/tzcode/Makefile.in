# Copyright (C) 2016 and later: Unicode, Inc. and others.
# License & terms of use: http://www.unicode.org/copyright.html
# Some Portions Copyright (c) 2006-2012 IBM and others. All Rights Reserved.

srcdir = @srcdir@
top_srcdir = @top_srcdir@

top_builddir = ../..

subdir = tools/tzcode

include $(top_builddir)/icudefs.mk

ifeq ($(TZDATA),)
TZDATA = $(firstword $(wildcard ./tzdata*.tar.gz) $(wildcard $(srcdir)/tzdata*.tar.gz))
endif
ifeq ($(TZCODE),)
TZCODE = $(firstword $(wildcard ./tzcode*.tar.gz) $(wildcard $(srcdir)/tzcode*.tar.gz))
endif


PRIMARY_DATA = africa antarctica asia australasia europe northamerica southamerica
SUPPLEMENTAL_DATA = etcetera factory backward
#DEPRECATED_DATA = pacificnew systemv solar87 solar88 solar89
#TDATA =	$(PRIMARY_DATA) $(SUPPLEMENTAL_DATA) $(DEPRECATED_DATA)
TDATA =	$(PRIMARY_DATA) $(SUPPLEMENTAL_DATA)
# rdar://
# Note for Apple ICU: In order to handle tzdata before 2020b we add commands below
# to process the systemv file if it is in fact present, to get the Rule entries
# for SystemV which are not present in the pre-2020b versions of icuzones.

TZDIR=zoneinfo

# CFLAGS+=-D_POSIX_C_SOURCE
# CPPFLAGS+= -DTZDIR=\"$(TZDIR)\" 
# rdar://
# need to override because CXXFLAGS is passed on the command line to this sub-make
override CFLAGS += -D_POSIX_C_SOURCE=200112L $(TOOLSEXTRAFLAGS)
override CXXFLAGS += $(TOOLSEXTRAFLAGS)
override CPPFLAGS += -DTZDIR=\"$(TZDIR)\" 

# more data
XDATA=zone.tab leapseconds iso3166.tab
ICUDATA=ZoneMetaData.java icu_zone.txt tz2icu zoneinfo64.txt zoneinfo.txt

VANGUARD_DIR= ./vanguard

# For TZ DB/ICU comparison
TZORIG=./tzorig
TZORIG_TZDIR=./tzorig/tzdir
TZORIG_ABS := $(shell pwd)/tzorig
TZORIG_TZDIR_ABS := $(TZORIG_ABS)/tzdir
# TZORIG_OPTS := CFLAGS="-D_POSIX_C_SOURCE $(TZORIG_EXTRA_CFLAGS)" TZDIR=$(TZORIG_TZDIR_ABS)
# rdar://
TZORIG_OPTS := CFLAGS="-D_POSIX_C_SOURCE $(TZORIG_EXTRA_CFLAGS) $(TOOLSEXTRAFLAGS)" TZDIR=$(TZORIG_TZDIR_ABS)


## Options for building zdumps
ZDUMPOUT=$(shell pwd)/zdumpout
ICUZDUMPOUT=$(shell pwd)/icuzdumpout

ZDUMP_OPTS= -v -a -d $(ZDUMPOUT) -c 1902,2038 -i
ICUZDUMP_OPTS= -a -d $(ICUZDUMPOUT)

# Executables & objects
# OBJECTS= zic.o localtime.o asctime.o scheck.o ialloc.o
# rdar:// change OBJECTS to ZICOBJECTS
ZICOBJECTS= zic.o localtime.o asctime.o scheck.o ialloc.o
ZICTARG=$(BINDIR)/zic$(EXEEXT)
ZICEXEC=$(TOOLBINDIR)/zic$(TOOLEXEEXT)
# rdar:/ add TZ2ICUOBJ
TZ2ICUOBJ= tz2icu.o
TZ2ICUTARG=$(BINDIR)/tz2icu$(EXEEXT)
TZ2ICUEXEC=$(TOOLBINDIR)/tz2icu$(TOOLEXEEXT)
ICUZDUMPTARG=$(BINDIR)/icuzdump$(EXEEXT)
ICUZDUMPEXEC=$(TOOLBINDIR)/icuzdump$(TOOLEXEEXT)
# rdar:/ add ICUZDUMPOBJ
ICUZDUMPOBJ= icuzdump.o

ifeq ($(TZDATA),)
all: 
	@echo ERROR "tzdata*.tar.gz" can\'t be found.
	@false
else
all: icu_data
endif

TZCODE_TARGETS= tzorig check-dump

ifeq ($(TZCODE),)
# we're broken.
$(TZCODE_TARGETS):
	@echo ERROR "tzcode*.tar.gz" can\'t be found.
	@false

else
ifeq ($(TZDATA),)
# we're broken.
$(TZCODE_TARGETS):
	@echo ERROR "tzdata*.tar.gz" can\'t be found.
	@false
else
tzorig:	$(TZCODE) $(TZDATA)
# rdar:// add "test -e $(TZORIG)/ziguard.awk" and block "if test -e $(TZORIG)/systemv"
	-$(RMV) ./tzorig/
	mkdir $@
	mkdir $(TZORIG_TZDIR)
	gunzip -d < $(TZDATA) | ( cd $@ ; tar xf - )
	gunzip -d < $(TZCODE) | ( cd $@ ; tar xf - )
	if test -e $(TZORIG)/ziguard.awk; then \
		for tzfile in $(TDATA) ; do \
			mv $(TZORIG)/$$tzfile $(TZORIG)/$$tzfile.bak && \
			awk -v DATAFORM=rearguard -f $(TZORIG)/ziguard.awk $(TZORIG)/$$tzfile.bak > $(TZORIG)/$$tzfile; \
		done; \
	fi;
	if test -e $(TZORIG)/systemv; then \
		mv $(TZORIG)/systemv $(TZORIG)/systemv.bak && \
		awk -v DATAFORM=rearguard -f $(TZORIG)/ziguard.awk $(TZORIG)/systemv.bak > $(TZORIG)/systemv; \
	fi;
	-mv $(TZORIG)/zdump.c $(TZORIG)/zdump.c.orig
	cp $(srcdir)/zdump.c $(TZORIG)/zdump.c
	-mv $(TZORIG)/factory $(TZORIG)/factory.orig
	cat $(TZORIG)/factory.orig $(srcdir)/icuzones > $(TZORIG)/factory
	-mv $(TZORIG)/zishrink.awk $(TZORIG)/zishrink.awk.orig
	sed -e '/if (line ~ \/^R SystemV \/) return/s/^/#/' $(TZORIG)/zishrink.awk.orig > $(TZORIG)/zishrink.awk
#	-mv $(TZORIG)/Makefile $(TZORIG)/Makefile.orig
#	sed -e "s/^BACKWARD=.*/BACKWARD= backward pacificnew/" $(TZORIG)/Makefile.orig > $(TZORIG)/Makefile
	$(MAKE) -C $@ $(TZORIG_OPTS) zdump zones

$(ZDUMPOUT): tzorig
	( cd $(TZORIG) ; ./zdump$(EXEEXT) $(ZDUMP_OPTS) )
	find $(ZDUMPOUT) -name '*--ICU' -exec sh -c 'mv "$${0}" $${0%--ICU}' {} \;

dump-out: $(ZDUMPOUT) $(ICUZDUMPOUT)

check-dump: dump-out
	diff -r zdumpout icuzdumpout

endif
endif

$(ICUZDUMPOUT): $(ICUZDUMPEXEC)
	-$(RMV) $(ICUZDUMPOUT)
	-mkdir $(ICUZDUMPOUT)
	$(INVOKE) $(ICUZDUMPEXEC) $(ICUZDUMP_OPTS)


#
# old 'tz' rules start here
#


# rdar:: 
# create modified CXXFLAGS without -fXXX, -Wxxxx (the settings for these don't work for tz2icu)
TZCODE_CXXFLAGS=$(patsubst -W%,,$(patsubst -f%,,$(CXXFLAGS)))
# and add logging
$(info # tzcode TOOLSEXTRAFLAGS=$(TOOLSEXTRAFLAGS))
$(info # tzcode CFLAGS=$(CFLAGS))
$(info # tzcode CXXFLAGS=$(CXXFLAGS))
$(info # tzcode TZCODE_CXXFLAGS=$(TZCODE_CXXFLAGS))
$(info # tzcode TZORIG_OPTS=$(TZORIG_OPTS))

#$(ZICTARG):		$(OBJECTS) $(TDATA) $(srcdir)/tz2icu.h
#		$(CC) $(CFLAGS) $(TZORIG_EXTRA_CFLAGS) $(LFLAGS) -I$(srcdir) $(OBJECTS) $(LDLIBS) -o $@
# rdar:// use ZICOBJECTS instead of OBJECTS
$(ZICTARG):		$(ZICOBJECTS) $(TDATA) $(srcdir)/tz2icu.h
		$(CC) $(CFLAGS) $(TZORIG_EXTRA_CFLAGS) $(LFLAGS) -I$(srcdir) $(ZICOBJECTS) $(LDLIBS) -o $@

# rdar:// add TZ2ICUOBJ rule
$(TZ2ICUOBJ):	$(srcdir)/tz2icu.cpp $(srcdir)/tz2icu.h
		$(CXX) -W -Wall $(TZCODE_CXXFLAGS) -I$(srcdir) -I$(top_srcdir)/common -pedantic $(srcdir)/tz2icu.cpp -c -o $@

#$(TZ2ICUTARG):	$(srcdir)/tz2icu.cpp $(srcdir)/tz2icu.h
#		$(CXX) $(CXXFLAGS) -I$(srcdir) -I$(top_srcdir)/common $(srcdir)/tz2icu.cpp -o $@
# rdar://
$(TZ2ICUTARG):	$(TZ2ICUOBJ)
		$(CXX) -W -Wall $(TZCODE_CXXFLAGS) -I$(srcdir) -I$(top_srcdir)/common -pedantic $(TZ2ICUOBJ) -o $@

$(ICUZDUMPTARG):	$(srcdir)/icuzdump.cpp
		$(LINK.cc)  -I$(srcdir) -I$(top_srcdir)/common -I$(top_srcdir)/i18n -I$(top_srcdir)/tools/toolutil -I$(top_srcdir)/io  -pedantic $(srcdir)/icuzdump.cpp $(LIBICUUC) $(LIBICUDT) $(LIBICUI18N) $(LIBICUIO) $(LIBICUTOOLUTIL) -o $@

# rdar:// add ICUZDUMPOBJ rule
$(ICUZDUMPOBJ):	$(srcdir)/icuzdump.cpp
		$(CXX) -W -Wall $(TZCODE_CXXFLAGS) --std=c++0x -I$(srcdir) -I$(top_srcdir)/common -I$(top_srcdir)/i18n -I$(top_srcdir)/tools/toolutil -I$(top_srcdir)/io $(srcdir)/icuzdump.cpp -c -o $@

$(TDATA): tdatamarker

tdatamarker: $(TZDATA)
# rdar:// add "if test -e ziguard.awk" and block "if test -e systemv"
	mkdir $(VANGUARD_DIR)
	gunzip -d < $(TZDATA) | tar xf - --exclude=Makefile
	if test -e ziguard.awk; then \
		for tzfile in $(TDATA) ; do \
			mv $$tzfile $(VANGUARD_DIR)/$$tzfile && \
			awk -v DATAFORM=rearguard -f ziguard.awk $(VANGUARD_DIR)/$$tzfile > $$tzfile; \
		done; \
	fi;
	if test -e systemv; then \
		mv systemv $(VANGUARD_DIR)/systemv && \
		awk -v DATAFORM=rearguard -f ziguard.awk $(VANGUARD_DIR)/systemv > systemv; \
	fi;
	touch $@

posix_only:	$(ZICEXEC) $(TDATA) $(srcdir)/icuzones
# rdar:// add "if test -e systemv" and else case
	if test -e systemv; then \
		$(ZICEXEC) -d $(TZDIR) -L /dev/null $(TDATA) systemv $(srcdir)/icuzones; \
	else \
		$(ZICEXEC) -d $(TZDIR) -L /dev/null $(TDATA) $(srcdir)/icuzones; \
	fi;


icu_data:	$(TZ2ICUEXEC) posix_only
		$(TZ2ICUEXEC) $(TZDIR) zone.tab `echo $(TZDATA) | sed -e "s/.*\/tzdata//;s/\.tar\.gz$$//"`
		$(TZ2ICUEXEC) $(TZDIR) zone.tab `echo $(TZDATA) | sed -e "s/.*\/tzdata//;s/\.tar\.gz$$//"` --old

# rdar://
tztoolobjs: $(ZICOBJECTS) $(TZ2ICUOBJ) $(ICUZDUMPOBJ)

clean:
		-rm -f core *.o *.out zdump${EXEEXT} $(ZICTARG) date $(TZ2ICUTARG)
		@echo ICU specific cleanup:
		-rm -f $(ICUDATA)
		-rm -rf $(TZDIR)
		-rm -rf $(VANGUARD_DIR)
		-$(RMV) $(ICUZDUMPTARG) tzorig ./zdumpout/ ./icuzdumpout/
ifneq ($(TZDATA),)
		-rm -rf `gunzip -d < $(TZDATA) | tar tf - --exclude=Makefile | grep -o '[^ ]*$$' | tr '\n' ' '`
		-rm -f tdatamarker
endif

checkclean:

dataclean: clean
# rdar:// add systemv
	-rm -f $(TDATA) systemv $(XDATA)

distclean:	dataclean clean
	-rm -f Makefile

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) \
	&& CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status


