// This file was automatically generated by protocompiler
// DO NOT EDIT!
// Compiled from SFACollection.proto

#import "SECSFARule.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#import "SECSFAAction.h"

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled; turn on ARC, or use 'objc_use_arc' option to generate non-ARC code.
#endif

@implementation SECSFARule

- (BOOL)hasEventType
{
    return _eventType != nil;
}
@synthesize eventType = _eventType;
- (BOOL)hasMatch
{
    return _match != nil;
}
@synthesize match = _match;
- (BOOL)hasAction
{
    return _action != nil;
}
@synthesize action = _action;
@synthesize repeatAfterSeconds = _repeatAfterSeconds;
- (void)setRepeatAfterSeconds:(int64_t)v
{
    _has.repeatAfterSeconds = (uint)YES;
    _repeatAfterSeconds = v;
}
- (void)setHasRepeatAfterSeconds:(BOOL)f
{
    _has.repeatAfterSeconds = (uint)f;
}
- (BOOL)hasRepeatAfterSeconds
{
    return _has.repeatAfterSeconds != 0;
}
- (BOOL)hasProcess
{
    return _process != nil;
}
@synthesize process = _process;
@synthesize eventClass = _eventClass;
- (SECSFAEventClass)eventClass
{
    return _has.eventClass ? _eventClass : SECSFAEventClass_Errors;
}
- (void)setEventClass:(SECSFAEventClass)v
{
    _has.eventClass = (uint)YES;
    _eventClass = v;
}
- (void)setHasEventClass:(BOOL)f
{
    _has.eventClass = (uint)f;
}
- (BOOL)hasEventClass
{
    return _has.eventClass != 0;
}
- (NSString *)eventClassAsString:(SECSFAEventClass)value
{
    return SECSFAEventClassAsString(value);
}
- (SECSFAEventClass)StringAsEventClass:(NSString *)str
{
    return StringAsSECSFAEventClass(str);
}

- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_eventType)
    {
        [dict setObject:self->_eventType forKey:@"eventType"];
    }
    if (self->_match)
    {
        [dict setObject:self->_match forKey:@"match"];
    }
    if (self->_action)
    {
        [dict setObject:[_action dictionaryRepresentation] forKey:@"action"];
    }
    if (self->_has.repeatAfterSeconds)
    {
        [dict setObject:[NSNumber numberWithLongLong:self->_repeatAfterSeconds] forKey:@"repeatAfterSeconds"];
    }
    if (self->_process)
    {
        [dict setObject:self->_process forKey:@"process"];
    }
    if (self->_has.eventClass)
    {
        [dict setObject:SECSFAEventClassAsString(self->_eventClass) forKey:@"eventClass"];
    }
    return dict;
}

BOOL SECSFARuleReadFrom(__unsafe_unretained SECSFARule *self, __unsafe_unretained PBDataReader *reader) {
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;

        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* eventType */:
            {
                NSString *new_eventType = PBReaderReadString(reader);
                self->_eventType = new_eventType;
            }
            break;
            case 2 /* match */:
            {
                NSData *new_match = PBReaderReadData(reader);
                self->_match = new_match;
            }
            break;
            case 3 /* action */:
            {
                SECSFAAction *new_action = [[SECSFAAction alloc] init];
                self->_action = new_action;
                PBDataReaderMark mark_action;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_action);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !SECSFAActionReadFrom(new_action, reader);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_action);
            }
            break;
            case 4 /* repeatAfterSeconds */:
            {
                self->_has.repeatAfterSeconds = (uint)YES;
                self->_repeatAfterSeconds = PBReaderReadInt64(reader);
            }
            break;
            case 5 /* process */:
            {
                NSString *new_process = PBReaderReadString(reader);
                self->_process = new_process;
            }
            break;
            case 6 /* eventClass */:
            {
                self->_has.eventClass = (uint)YES;
                self->_eventClass = PBReaderReadInt32(reader);
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
    }
    return !PBReaderHasError(reader);
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return SECSFARuleReadFrom(self, reader);
}
- (void)writeTo:(PBDataWriter *)writer
{
    /* eventType */
    {
        if (self->_eventType)
        {
            PBDataWriterWriteStringField(writer, self->_eventType, 1);
        }
    }
    /* match */
    {
        if (self->_match)
        {
            PBDataWriterWriteDataField(writer, self->_match, 2);
        }
    }
    /* action */
    {
        if (self->_action != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_action, 3);
        }
    }
    /* repeatAfterSeconds */
    {
        if (self->_has.repeatAfterSeconds)
        {
            PBDataWriterWriteInt64Field(writer, self->_repeatAfterSeconds, 4);
        }
    }
    /* process */
    {
        if (self->_process)
        {
            PBDataWriterWriteStringField(writer, self->_process, 5);
        }
    }
    /* eventClass */
    {
        if (self->_has.eventClass)
        {
            PBDataWriterWriteInt32Field(writer, self->_eventClass, 6);
        }
    }
}

- (void)copyTo:(SECSFARule *)other
{
    if (_eventType)
    {
        other.eventType = _eventType;
    }
    if (_match)
    {
        other.match = _match;
    }
    if (_action)
    {
        other.action = _action;
    }
    if (self->_has.repeatAfterSeconds)
    {
        other->_repeatAfterSeconds = _repeatAfterSeconds;
        other->_has.repeatAfterSeconds = YES;
    }
    if (_process)
    {
        other.process = _process;
    }
    if (self->_has.eventClass)
    {
        other->_eventClass = _eventClass;
        other->_has.eventClass = YES;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    SECSFARule *copy = [[[self class] allocWithZone:zone] init];
    copy->_eventType = [_eventType copyWithZone:zone];
    copy->_match = [_match copyWithZone:zone];
    copy->_action = [_action copyWithZone:zone];
    if (self->_has.repeatAfterSeconds)
    {
        copy->_repeatAfterSeconds = _repeatAfterSeconds;
        copy->_has.repeatAfterSeconds = YES;
    }
    copy->_process = [_process copyWithZone:zone];
    if (self->_has.eventClass)
    {
        copy->_eventClass = _eventClass;
        copy->_has.eventClass = YES;
    }
    return copy;
}

- (BOOL)isEqual:(id)object
{
    SECSFARule *other = (SECSFARule *)object;
    return [other isMemberOfClass:[self class]]
    &&
    ((!self->_eventType && !other->_eventType) || [self->_eventType isEqual:other->_eventType])
    &&
    ((!self->_match && !other->_match) || [self->_match isEqual:other->_match])
    &&
    ((!self->_action && !other->_action) || [self->_action isEqual:other->_action])
    &&
    ((self->_has.repeatAfterSeconds && other->_has.repeatAfterSeconds && self->_repeatAfterSeconds == other->_repeatAfterSeconds) || (!self->_has.repeatAfterSeconds && !other->_has.repeatAfterSeconds))
    &&
    ((!self->_process && !other->_process) || [self->_process isEqual:other->_process])
    &&
    ((self->_has.eventClass && other->_has.eventClass && self->_eventClass == other->_eventClass) || (!self->_has.eventClass && !other->_has.eventClass))
    ;
}

- (NSUInteger)hash
{
    return 0
    ^
    [self->_eventType hash]
    ^
    [self->_match hash]
    ^
    [self->_action hash]
    ^
    (self->_has.repeatAfterSeconds ? PBHashInt((NSUInteger)self->_repeatAfterSeconds) : 0)
    ^
    [self->_process hash]
    ^
    (self->_has.eventClass ? PBHashInt((NSUInteger)self->_eventClass) : 0)
    ;
}

- (void)mergeFrom:(SECSFARule *)other
{
    if (other->_eventType)
    {
        [self setEventType:other->_eventType];
    }
    if (other->_match)
    {
        [self setMatch:other->_match];
    }
    if (self->_action && other->_action)
    {
        [self->_action mergeFrom:other->_action];
    }
    else if (!self->_action && other->_action)
    {
        [self setAction:other->_action];
    }
    if (other->_has.repeatAfterSeconds)
    {
        self->_repeatAfterSeconds = other->_repeatAfterSeconds;
        self->_has.repeatAfterSeconds = YES;
    }
    if (other->_process)
    {
        [self setProcess:other->_process];
    }
    if (other->_has.eventClass)
    {
        self->_eventClass = other->_eventClass;
        self->_has.eventClass = YES;
    }
}

@end

