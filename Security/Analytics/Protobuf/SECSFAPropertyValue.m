// This file was automatically generated by protocompiler
// DO NOT EDIT!
// Compiled from SFACollection.proto

#import "SECSFAPropertyValue.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled; turn on ARC, or use 'objc_use_arc' option to generate non-ARC code.
#endif

@implementation SECSFAPropertyValue

@synthesize integer = _integer;
- (void)setInteger:(int64_t)v
{
    [self clearOneofValuesForProperty];
    self->_has.property = YES;
    self->_property = SECSFAPropertyValue_Property_Integer;
    _has.integer = (uint)YES;
    _integer = v;
}
- (void)setHasInteger:(BOOL)f
{
    _has.integer = (uint)f;
}
- (BOOL)hasInteger
{
    return _has.integer != 0;
}
- (BOOL)hasString
{
    return _string != nil;
}
@synthesize string = _string;
- (void)setString:(NSString *)v
{
    [self clearOneofValuesForProperty];
    self->_has.property = YES;
    self->_property = SECSFAPropertyValue_Property_String;
    _string = v;
}
@synthesize property = _property;
- (SECSFAPropertyValue_Property)property
{
    return _has.property ? _property : SECSFAPropertyValue_Property_PBUNSET;
}
- (void)setProperty:(SECSFAPropertyValue_Property)v
{
    _has.property = (uint)YES;
    _property = v;
}
- (void)setHasProperty:(BOOL)f
{
    _has.property = (uint)f;
}
- (BOOL)hasProperty
{
    return _has.property != 0;
}
- (NSString *)propertyAsString:(SECSFAPropertyValue_Property)value
{
    return SECSFAPropertyValue_PropertyAsString(value);
}
- (SECSFAPropertyValue_Property)StringAsProperty:(NSString *)str
{
    return StringAsSECSFAPropertyValue_Property(str);
}
- (void)clearOneofValuesForProperty
{
    self->_has.property = NO;
    self->_property = SECSFAPropertyValue_Property_PBUNSET;
    self->_has.integer = NO;
    self->_integer = 0;
    self->_string = nil;
}

- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_has.integer)
    {
        [dict setObject:[NSNumber numberWithLongLong:self->_integer] forKey:@"integer"];
    }
    if (self->_string)
    {
        [dict setObject:self->_string forKey:@"string"];
    }
    if (self->_has.property)
    {
        [dict setObject:SECSFAPropertyValue_PropertyAsString(self->_property) forKey:@"Property"];
    }
    return dict;
}

BOOL SECSFAPropertyValueReadFrom(__unsafe_unretained SECSFAPropertyValue *self, __unsafe_unretained PBDataReader *reader) {
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;

        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 0 /* property */:
            {
                /* Reading past oneof underlying variable, and discarding */
                PBReaderReadInt32(reader);
            }
            break;
            case 100 /* integer */:
            {
                [self clearOneofValuesForProperty];
                self->_has.property = YES;
                self->_property = SECSFAPropertyValue_Property_Integer;
                self->_has.integer = (uint)YES;
                self->_integer = PBReaderReadInt64(reader);
            }
            break;
            case 101 /* string */:
            {
                [self clearOneofValuesForProperty];
                self->_has.property = YES;
                self->_property = SECSFAPropertyValue_Property_String;
                NSString *new_string = PBReaderReadString(reader);
                self->_string = new_string;
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
    }
    return !PBReaderHasError(reader);
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return SECSFAPropertyValueReadFrom(self, reader);
}
- (void)writeTo:(PBDataWriter *)writer
{
    /* property */
    {
        /* Skipping oneof underlying variable */
    }
    /* integer */
    {
        if (self->_has.integer)
        {
            PBDataWriterWriteInt64Field(writer, self->_integer, 100);
        }
    }
    /* string */
    {
        if (self->_string)
        {
            PBDataWriterWriteStringField(writer, self->_string, 101);
        }
    }
}

- (void)copyTo:(SECSFAPropertyValue *)other
{
    if (self->_has.property)
    {
        other->_property = _property;
        other->_has.property = YES;
    }
    if (self->_has.integer)
    {
        other->_integer = _integer;
        other->_has.integer = YES;
    }
    if (_string)
    {
        other.string = _string;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    SECSFAPropertyValue *copy = [[[self class] allocWithZone:zone] init];
    if (self->_has.property)
    {
        copy->_property = _property;
        copy->_has.property = YES;
    }
    if (self->_has.integer)
    {
        copy->_integer = _integer;
        copy->_has.integer = YES;
    }
    copy->_string = [_string copyWithZone:zone];
    return copy;
}

- (BOOL)isEqual:(id)object
{
    SECSFAPropertyValue *other = (SECSFAPropertyValue *)object;
    return [other isMemberOfClass:[self class]]
    &&
    ((self->_has.property && other->_has.property && self->_property == other->_property) || (!self->_has.property && !other->_has.property))
    &&
    ((self->_has.integer && other->_has.integer && self->_integer == other->_integer) || (!self->_has.integer && !other->_has.integer))
    &&
    ((!self->_string && !other->_string) || [self->_string isEqual:other->_string])
    ;
}

- (NSUInteger)hash
{
    return 0
    ^
    (self->_has.property ? PBHashInt((NSUInteger)self->_property) : 0)
    ^
    (self->_has.integer ? PBHashInt((NSUInteger)self->_integer) : 0)
    ^
    [self->_string hash]
    ;
}

- (void)mergeFrom:(SECSFAPropertyValue *)other
{
    if (other->_has.property)
    {
        self->_property = other->_property;
        self->_has.property = YES;
    }
    if (other->_has.integer)
    {
        self->_integer = other->_integer;
        self->_has.integer = YES;
    }
    if (other->_string)
    {
        [self setString:other->_string];
    }
}

@end

