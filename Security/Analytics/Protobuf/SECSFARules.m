// This file was automatically generated by protocompiler
// DO NOT EDIT!
// Compiled from SFACollection.proto

#import "SECSFARules.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#import "SECSFAEventFilter.h"
#import "SECSFAEventRule.h"
#import "SECSFAVersionMatch.h"

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled; turn on ARC, or use 'objc_use_arc' option to generate non-ARC code.
#endif

@implementation SECSFARules

@synthesize eventRules = _eventRules;
- (void)clearEventRules
{
    [_eventRules removeAllObjects];
}
- (void)addEventRules:(SECSFAEventRule *)i
{
    if (!_eventRules)
    {
        _eventRules = [[NSMutableArray alloc] init];
    }
    [_eventRules addObject:i];
}
- (NSUInteger)eventRulesCount
{
    return [_eventRules count];
}
- (SECSFAEventRule *)eventRulesAtIndex:(NSUInteger)idx
{
    return [_eventRules objectAtIndex:idx];
}
+ (Class)eventRulesType
{
    return [SECSFAEventRule class];
}
- (BOOL)hasAllowedBuilds
{
    return _allowedBuilds != nil;
}
@synthesize allowedBuilds = _allowedBuilds;
@synthesize eventFilters = _eventFilters;
- (void)clearEventFilters
{
    [_eventFilters removeAllObjects];
}
- (void)addEventFilter:(SECSFAEventFilter *)i
{
    if (!_eventFilters)
    {
        _eventFilters = [[NSMutableArray alloc] init];
    }
    [_eventFilters addObject:i];
}
- (NSUInteger)eventFiltersCount
{
    return [_eventFilters count];
}
- (SECSFAEventFilter *)eventFilterAtIndex:(NSUInteger)idx
{
    return [_eventFilters objectAtIndex:idx];
}
+ (Class)eventFilterType
{
    return [SECSFAEventFilter class];
}

- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if ([self->_eventRules count])
    {
        NSMutableArray *eventRulesDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_eventRules count]];
        for (SECSFAEventRule *i_eventRules in self->_eventRules)
        {
            [eventRulesDictReprs addObject:[i_eventRules dictionaryRepresentation]];
        }
        [dict setObject:eventRulesDictReprs forKey:@"eventRules"];
    }
    if (self->_allowedBuilds)
    {
        [dict setObject:[_allowedBuilds dictionaryRepresentation] forKey:@"allowedBuilds"];
    }
    if ([self->_eventFilters count])
    {
        NSMutableArray *eventFiltersDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_eventFilters count]];
        for (SECSFAEventFilter *i_eventFilter in self->_eventFilters)
        {
            [eventFiltersDictReprs addObject:[i_eventFilter dictionaryRepresentation]];
        }
        [dict setObject:eventFiltersDictReprs forKey:@"eventFilter"];
    }
    return dict;
}

BOOL SECSFARulesReadFrom(__unsafe_unretained SECSFARules *self, __unsafe_unretained PBDataReader *reader) {
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;

        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 2 /* eventRules */:
            {
                SECSFAEventRule *new_eventRules = [[SECSFAEventRule alloc] init];
                [self addEventRules:new_eventRules];
                PBDataReaderMark mark_eventRules;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_eventRules);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !SECSFAEventRuleReadFrom(new_eventRules, reader);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_eventRules);
            }
            break;
            case 3 /* allowedBuilds */:
            {
                SECSFAVersionMatch *new_allowedBuilds = [[SECSFAVersionMatch alloc] init];
                self->_allowedBuilds = new_allowedBuilds;
                PBDataReaderMark mark_allowedBuilds;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_allowedBuilds);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !SECSFAVersionMatchReadFrom(new_allowedBuilds, reader);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_allowedBuilds);
            }
            break;
            case 4 /* eventFilters */:
            {
                SECSFAEventFilter *new_eventFilter = [[SECSFAEventFilter alloc] init];
                [self addEventFilter:new_eventFilter];
                PBDataReaderMark mark_eventFilter;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_eventFilter);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !SECSFAEventFilterReadFrom(new_eventFilter, reader);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_eventFilter);
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
    }
    return !PBReaderHasError(reader);
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return SECSFARulesReadFrom(self, reader);
}
- (void)writeTo:(PBDataWriter *)writer
{
    /* eventRules */
    {
        for (SECSFAEventRule *i_eventRules in self->_eventRules)
        {
            PBDataWriterWriteSubmessage(writer, i_eventRules, 2);
        }
    }
    /* allowedBuilds */
    {
        if (self->_allowedBuilds != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_allowedBuilds, 3);
        }
    }
    /* eventFilters */
    {
        for (SECSFAEventFilter *i_eventFilter in self->_eventFilters)
        {
            PBDataWriterWriteSubmessage(writer, i_eventFilter, 4);
        }
    }
}

- (void)copyTo:(SECSFARules *)other
{
    if ([self eventRulesCount])
    {
        [other clearEventRules];
        NSUInteger eventRulesCnt = [self eventRulesCount];
        for (NSUInteger i = 0; i < eventRulesCnt; i++)
        {
            [other addEventRules:[self eventRulesAtIndex:i]];
        }
    }
    if (_allowedBuilds)
    {
        other.allowedBuilds = _allowedBuilds;
    }
    if ([self eventFiltersCount])
    {
        [other clearEventFilters];
        NSUInteger eventFiltersCnt = [self eventFiltersCount];
        for (NSUInteger i = 0; i < eventFiltersCnt; i++)
        {
            [other addEventFilter:[self eventFilterAtIndex:i]];
        }
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    SECSFARules *copy = [[[self class] allocWithZone:zone] init];
    for (SECSFAEventRule *v in _eventRules)
    {
        SECSFAEventRule *vCopy = [v copyWithZone:zone];
        [copy addEventRules:vCopy];
    }
    copy->_allowedBuilds = [_allowedBuilds copyWithZone:zone];
    for (SECSFAEventFilter *v in _eventFilters)
    {
        SECSFAEventFilter *vCopy = [v copyWithZone:zone];
        [copy addEventFilter:vCopy];
    }
    return copy;
}

- (BOOL)isEqual:(id)object
{
    SECSFARules *other = (SECSFARules *)object;
    return [other isMemberOfClass:[self class]]
    &&
    ((!self->_eventRules && !other->_eventRules) || [self->_eventRules isEqual:other->_eventRules])
    &&
    ((!self->_allowedBuilds && !other->_allowedBuilds) || [self->_allowedBuilds isEqual:other->_allowedBuilds])
    &&
    ((!self->_eventFilters && !other->_eventFilters) || [self->_eventFilters isEqual:other->_eventFilters])
    ;
}

- (NSUInteger)hash
{
    return 0
    ^
    [self->_eventRules hash]
    ^
    [self->_allowedBuilds hash]
    ^
    [self->_eventFilters hash]
    ;
}

- (void)mergeFrom:(SECSFARules *)other
{
    for (SECSFAEventRule *iter_eventRules in other->_eventRules)
    {
        [self addEventRules:iter_eventRules];
    }
    if (self->_allowedBuilds && other->_allowedBuilds)
    {
        [self->_allowedBuilds mergeFrom:other->_allowedBuilds];
    }
    else if (!self->_allowedBuilds && other->_allowedBuilds)
    {
        [self setAllowedBuilds:other->_allowedBuilds];
    }
    for (SECSFAEventFilter *iter_eventFilters in other->_eventFilters)
    {
        [self addEventFilter:iter_eventFilters];
    }
}

@end

