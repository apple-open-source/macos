// This file was automatically generated by protocompiler
// DO NOT EDIT!
// Compiled from SFACollection.proto

#import "SECSFAVersionMatch.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#import "SECSFAVersion.h"

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled; turn on ARC, or use 'objc_use_arc' option to generate non-ARC code.
#endif

@implementation SECSFAVersionMatch

@synthesize versions = _versions;
- (void)clearVersions
{
    [_versions removeAllObjects];
}
- (void)addVersions:(SECSFAVersion *)i
{
    if (!_versions)
    {
        _versions = [[NSMutableArray alloc] init];
    }
    [_versions addObject:i];
}
- (NSUInteger)versionsCount
{
    return [_versions count];
}
- (SECSFAVersion *)versionsAtIndex:(NSUInteger)idx
{
    return [_versions objectAtIndex:idx];
}
+ (Class)versionsType
{
    return [SECSFAVersion class];
}

- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if ([self->_versions count])
    {
        NSMutableArray *versionsDictReprs = [[NSMutableArray alloc] initWithCapacity:[self->_versions count]];
        for (SECSFAVersion *i_versions in self->_versions)
        {
            [versionsDictReprs addObject:[i_versions dictionaryRepresentation]];
        }
        [dict setObject:versionsDictReprs forKey:@"versions"];
    }
    return dict;
}

BOOL SECSFAVersionMatchReadFrom(__unsafe_unretained SECSFAVersionMatch *self, __unsafe_unretained PBDataReader *reader) {
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;

        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* versions */:
            {
                SECSFAVersion *new_versions = [[SECSFAVersion alloc] init];
                [self addVersions:new_versions];
                PBDataReaderMark mark_versions;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_versions);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !SECSFAVersionReadFrom(new_versions, reader);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_versions);
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
    }
    return !PBReaderHasError(reader);
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return SECSFAVersionMatchReadFrom(self, reader);
}
- (void)writeTo:(PBDataWriter *)writer
{
    /* versions */
    {
        for (SECSFAVersion *i_versions in self->_versions)
        {
            PBDataWriterWriteSubmessage(writer, i_versions, 1);
        }
    }
}

- (void)copyTo:(SECSFAVersionMatch *)other
{
    if ([self versionsCount])
    {
        [other clearVersions];
        NSUInteger versionsCnt = [self versionsCount];
        for (NSUInteger i = 0; i < versionsCnt; i++)
        {
            [other addVersions:[self versionsAtIndex:i]];
        }
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    SECSFAVersionMatch *copy = [[[self class] allocWithZone:zone] init];
    for (SECSFAVersion *v in _versions)
    {
        SECSFAVersion *vCopy = [v copyWithZone:zone];
        [copy addVersions:vCopy];
    }
    return copy;
}

- (BOOL)isEqual:(id)object
{
    SECSFAVersionMatch *other = (SECSFAVersionMatch *)object;
    return [other isMemberOfClass:[self class]]
    &&
    ((!self->_versions && !other->_versions) || [self->_versions isEqual:other->_versions])
    ;
}

- (NSUInteger)hash
{
    return 0
    ^
    [self->_versions hash]
    ;
}

- (void)mergeFrom:(SECSFAVersionMatch *)other
{
    for (SECSFAVersion *iter_versions in other->_versions)
    {
        [self addVersions:iter_versions];
    }
}

@end

