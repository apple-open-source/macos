// This file was automatically generated by protocompiler
// DO NOT EDIT!
// Compiled from SFACollection.proto

#import "SECSFAVersion.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled; turn on ARC, or use 'objc_use_arc' option to generate non-ARC code.
#endif

@implementation SECSFAVersion

@synthesize productName = _productName;
- (SECSFAProductName)productName
{
    return _has.productName ? _productName : SECSFAProductName_macOS;
}
- (void)setProductName:(SECSFAProductName)v
{
    _has.productName = (uint)YES;
    _productName = v;
}
- (void)setHasProductName:(BOOL)f
{
    _has.productName = (uint)f;
}
- (BOOL)hasProductName
{
    return _has.productName != 0;
}
- (NSString *)productNameAsString:(SECSFAProductName)value
{
    return SECSFAProductNameAsString(value);
}
- (SECSFAProductName)StringAsProductName:(NSString *)str
{
    return StringAsSECSFAProductName(str);
}
@synthesize major = _major;
- (void)setMajor:(int64_t)v
{
    _has.major = (uint)YES;
    _major = v;
}
- (void)setHasMajor:(BOOL)f
{
    _has.major = (uint)f;
}
- (BOOL)hasMajor
{
    return _has.major != 0;
}
@synthesize minor = _minor;
- (void)setMinor:(int64_t)v
{
    _has.minor = (uint)YES;
    _minor = v;
}
- (void)setHasMinor:(BOOL)f
{
    _has.minor = (uint)f;
}
- (BOOL)hasMinor
{
    return _has.minor != 0;
}
@synthesize build = _build;
- (void)setBuild:(int64_t)v
{
    _has.build = (uint)YES;
    _build = v;
}
- (void)setHasBuild:(BOOL)f
{
    _has.build = (uint)f;
}
- (BOOL)hasBuild
{
    return _has.build != 0;
}

- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_has.productName)
    {
        [dict setObject:SECSFAProductNameAsString(self->_productName) forKey:@"productName"];
    }
    if (self->_has.major)
    {
        [dict setObject:[NSNumber numberWithLongLong:self->_major] forKey:@"major"];
    }
    if (self->_has.minor)
    {
        [dict setObject:[NSNumber numberWithLongLong:self->_minor] forKey:@"minor"];
    }
    if (self->_has.build)
    {
        [dict setObject:[NSNumber numberWithLongLong:self->_build] forKey:@"build"];
    }
    return dict;
}

BOOL SECSFAVersionReadFrom(__unsafe_unretained SECSFAVersion *self, __unsafe_unretained PBDataReader *reader) {
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;

        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* productName */:
            {
                self->_has.productName = (uint)YES;
                self->_productName = PBReaderReadInt32(reader);
            }
            break;
            case 2 /* major */:
            {
                self->_has.major = (uint)YES;
                self->_major = PBReaderReadInt64(reader);
            }
            break;
            case 3 /* minor */:
            {
                self->_has.minor = (uint)YES;
                self->_minor = PBReaderReadInt64(reader);
            }
            break;
            case 4 /* build */:
            {
                self->_has.build = (uint)YES;
                self->_build = PBReaderReadInt64(reader);
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
    }
    return !PBReaderHasError(reader);
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return SECSFAVersionReadFrom(self, reader);
}
- (void)writeTo:(PBDataWriter *)writer
{
    /* productName */
    {
        if (self->_has.productName)
        {
            PBDataWriterWriteInt32Field(writer, self->_productName, 1);
        }
    }
    /* major */
    {
        if (self->_has.major)
        {
            PBDataWriterWriteInt64Field(writer, self->_major, 2);
        }
    }
    /* minor */
    {
        if (self->_has.minor)
        {
            PBDataWriterWriteInt64Field(writer, self->_minor, 3);
        }
    }
    /* build */
    {
        if (self->_has.build)
        {
            PBDataWriterWriteInt64Field(writer, self->_build, 4);
        }
    }
}

- (void)copyTo:(SECSFAVersion *)other
{
    if (self->_has.productName)
    {
        other->_productName = _productName;
        other->_has.productName = YES;
    }
    if (self->_has.major)
    {
        other->_major = _major;
        other->_has.major = YES;
    }
    if (self->_has.minor)
    {
        other->_minor = _minor;
        other->_has.minor = YES;
    }
    if (self->_has.build)
    {
        other->_build = _build;
        other->_has.build = YES;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    SECSFAVersion *copy = [[[self class] allocWithZone:zone] init];
    if (self->_has.productName)
    {
        copy->_productName = _productName;
        copy->_has.productName = YES;
    }
    if (self->_has.major)
    {
        copy->_major = _major;
        copy->_has.major = YES;
    }
    if (self->_has.minor)
    {
        copy->_minor = _minor;
        copy->_has.minor = YES;
    }
    if (self->_has.build)
    {
        copy->_build = _build;
        copy->_has.build = YES;
    }
    return copy;
}

- (BOOL)isEqual:(id)object
{
    SECSFAVersion *other = (SECSFAVersion *)object;
    return [other isMemberOfClass:[self class]]
    &&
    ((self->_has.productName && other->_has.productName && self->_productName == other->_productName) || (!self->_has.productName && !other->_has.productName))
    &&
    ((self->_has.major && other->_has.major && self->_major == other->_major) || (!self->_has.major && !other->_has.major))
    &&
    ((self->_has.minor && other->_has.minor && self->_minor == other->_minor) || (!self->_has.minor && !other->_has.minor))
    &&
    ((self->_has.build && other->_has.build && self->_build == other->_build) || (!self->_has.build && !other->_has.build))
    ;
}

- (NSUInteger)hash
{
    return 0
    ^
    (self->_has.productName ? PBHashInt((NSUInteger)self->_productName) : 0)
    ^
    (self->_has.major ? PBHashInt((NSUInteger)self->_major) : 0)
    ^
    (self->_has.minor ? PBHashInt((NSUInteger)self->_minor) : 0)
    ^
    (self->_has.build ? PBHashInt((NSUInteger)self->_build) : 0)
    ;
}

- (void)mergeFrom:(SECSFAVersion *)other
{
    if (other->_has.productName)
    {
        self->_productName = other->_productName;
        self->_has.productName = YES;
    }
    if (other->_has.major)
    {
        self->_major = other->_major;
        self->_has.major = YES;
    }
    if (other->_has.minor)
    {
        self->_minor = other->_minor;
        self->_has.minor = YES;
    }
    if (other->_has.build)
    {
        self->_build = other->_build;
        self->_has.build = YES;
    }
}

@end

