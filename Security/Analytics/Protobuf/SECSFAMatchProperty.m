// This file was automatically generated by protocompiler
// DO NOT EDIT!
// Compiled from SFACollection.proto

#import "SECSFAMatchProperty.h"
#import <ProtocolBuffer/PBConstants.h>
#import <ProtocolBuffer/PBHashUtil.h>
#import <ProtocolBuffer/PBDataReader.h>

#import "SECSFAPropertyValue.h"

#if !__has_feature(objc_arc)
# error This generated file depends on ARC but it is not enabled; turn on ARC, or use 'objc_use_arc' option to generate non-ARC code.
#endif

@implementation SECSFAMatchProperty

- (BOOL)hasPropertyName
{
    return _propertyName != nil;
}
@synthesize propertyName = _propertyName;
- (BOOL)hasValue
{
    return _value != nil;
}
@synthesize value = _value;

- (NSString *)description
{
    return [NSString stringWithFormat:@"%@ %@", [super description], [self dictionaryRepresentation]];
}

- (NSDictionary *)dictionaryRepresentation
{
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    if (self->_propertyName)
    {
        [dict setObject:self->_propertyName forKey:@"propertyName"];
    }
    if (self->_value)
    {
        [dict setObject:[_value dictionaryRepresentation] forKey:@"value"];
    }
    return dict;
}

BOOL SECSFAMatchPropertyReadFrom(__unsafe_unretained SECSFAMatchProperty *self, __unsafe_unretained PBDataReader *reader) {
    while (PBReaderHasMoreData(reader)) {
        uint32_t tag = 0;
        uint8_t aType = 0;

        PBReaderReadTag32AndType(reader, &tag, &aType);

        if (PBReaderHasError(reader))
            break;

        if (aType == TYPE_END_GROUP) {
            break;
        }

        switch (tag) {

            case 1 /* propertyName */:
            {
                NSString *new_propertyName = PBReaderReadString(reader);
                self->_propertyName = new_propertyName;
            }
            break;
            case 2 /* value */:
            {
                SECSFAPropertyValue *new_value = [[SECSFAPropertyValue alloc] init];
                self->_value = new_value;
                PBDataReaderMark mark_value;
                BOOL markError = !PBReaderPlaceMark(reader, &mark_value);
                if (markError)
                {
                    return NO;
                }
                BOOL inError = !SECSFAPropertyValueReadFrom(new_value, reader);
                if (inError)
                {
                    return NO;
                }
                PBReaderRecallMark(reader, &mark_value);
            }
            break;
            default:
                if (!PBReaderSkipValueWithTag(reader, tag, aType))
                    return NO;
                break;
        }
    }
    return !PBReaderHasError(reader);
}

- (BOOL)readFrom:(PBDataReader *)reader
{
    return SECSFAMatchPropertyReadFrom(self, reader);
}
- (void)writeTo:(PBDataWriter *)writer
{
    /* propertyName */
    {
        if (self->_propertyName)
        {
            PBDataWriterWriteStringField(writer, self->_propertyName, 1);
        }
    }
    /* value */
    {
        if (self->_value != nil)
        {
            PBDataWriterWriteSubmessage(writer, self->_value, 2);
        }
    }
}

- (void)copyTo:(SECSFAMatchProperty *)other
{
    if (_propertyName)
    {
        other.propertyName = _propertyName;
    }
    if (_value)
    {
        other.value = _value;
    }
}

- (id)copyWithZone:(NSZone *)zone
{
    SECSFAMatchProperty *copy = [[[self class] allocWithZone:zone] init];
    copy->_propertyName = [_propertyName copyWithZone:zone];
    copy->_value = [_value copyWithZone:zone];
    return copy;
}

- (BOOL)isEqual:(id)object
{
    SECSFAMatchProperty *other = (SECSFAMatchProperty *)object;
    return [other isMemberOfClass:[self class]]
    &&
    ((!self->_propertyName && !other->_propertyName) || [self->_propertyName isEqual:other->_propertyName])
    &&
    ((!self->_value && !other->_value) || [self->_value isEqual:other->_value])
    ;
}

- (NSUInteger)hash
{
    return 0
    ^
    [self->_propertyName hash]
    ^
    [self->_value hash]
    ;
}

- (void)mergeFrom:(SECSFAMatchProperty *)other
{
    if (other->_propertyName)
    {
        [self setPropertyName:other->_propertyName];
    }
    if (self->_value && other->_value)
    {
        [self->_value mergeFrom:other->_value];
    }
    else if (!self->_value && other->_value)
    {
        [self setValue:other->_value];
    }
}

@end

