//
//  PKITrustStoreAssetTests.m
//

#import <XCTest/XCTest.h>
#import <Foundation/Foundation.h>
#import <Security/SecCertificatePriv.h>
#import <Security/SecTrustPriv.h>
#import <utilities/SecCFRelease.h>
#import <sqlite3.h>
#import "trust/trustd/trustdFileLocations.h"
#import "trust/trustd/OTAAutoAssetClient.h"
#import "trust/trustd/OTATrustUtilities.h"
#import "trust/trustd/SecTrustStoreServer.h"

#import "TrustDaemonTestCase.h"


@interface PKITrustStoreAssetInitializationTests : TrustDaemonInitializationTestCase
@end

@implementation PKITrustStoreAssetInitializationTests

- (void)testInvalidSavedAssetPath {
#if TARGET_OS_BRIDGE
    /* bridgeOS doesn't use Mobile Asset */
    XCTSkip();
#endif
    NSError *assetError = NULL;
    OTAAutoAssetClient *autoAssetClient = [[OTAAutoAssetClient alloc] initWithError:&assetError];
    XCTAssert(autoAssetClient != NULL && assetError == NULL);
    // save an asset path that's invalid
    NSString *fakePath = @"/private/tmp/com_apple_MobileAsset_PKITrustStore";
    BOOL didSave = [OTAAutoAssetClient saveTrustStoreAssetPath:fakePath];
    // rdar:// 121743620: if we can't save the asset path in the test environment, bail out now
    if (!didSave) { XCTSkip(); }
    XCTAssert(didSave == YES);
    // read it back to make sure it was written
    NSString *savedPath = [OTAAutoAssetClient savedTrustStoreAssetPath];
    XCTAssert(savedPath != NULL);
    XCTAssertEqualObjects(savedPath, fakePath);
    // make sure our validation method returns NULL for the fake path, even without existing
    NSString *resolvedPath = [OTAAutoAssetClient validTrustStoreAssetPath:fakePath mustExist:NO];
    XCTAssert(resolvedPath == NULL);
}

- (void)testValidSavedAssetPath {
#if TARGET_OS_BRIDGE
    /* bridgeOS doesn't use Mobile Asset */
    XCTSkip();
#endif
    NSError *assetError = NULL;
    OTAAutoAssetClient *autoAssetClient = [[OTAAutoAssetClient alloc] initWithError:&assetError];
    XCTAssert(autoAssetClient != NULL && assetError == NULL);
    // we can't just call [autoAssetClient startUsingLocalAsset] since that will kill our test
    // as soon as the completion routine decides to exit.
    // instead: save a test asset path whose directory components exist.
    // note: there can be a race for creation of our PKITrustStore and PKITrustSupplementals
    // directories in the AssetsV2 directory, so use a pre-existing directory instead.
#if (TARGET_OS_MAC && !TARGET_OS_IPHONE)
    NSString *assetPath = @"/System/Library/AssetsV2/persisted";
#else
    NSString *assetPath = @"/private/var/MobileAsset/AssetsV2/persisted";
#endif
    BOOL didSave = [[NSFileManager defaultManager] fileExistsAtPath:assetPath];
    if (didSave) { didSave = [OTAAutoAssetClient saveTrustStoreAssetPath:assetPath]; }
    // rdar://121743620: if we can't save the asset path in the test environment, bail out now
    if (!didSave) { XCTSkip(); }
    XCTAssert(didSave == YES);
    // read it back to make sure it was written
    NSString *savedPath = [OTAAutoAssetClient savedTrustStoreAssetPath];
    XCTAssert(savedPath != NULL);
    XCTAssertEqualObjects(savedPath, assetPath);
    // make sure our validation method returns the validated path
    NSString *resolvedPath = [OTAAutoAssetClient validTrustStoreAssetPath:assetPath mustExist:NO];
    XCTAssert(resolvedPath != NULL);
    XCTAssertEqualObjects(resolvedPath, assetPath);
}

- (void)testInitializeSecOTAPKIRef {
#if TARGET_OS_BRIDGE
    /* bridgeOS doesn't use Mobile Asset */
    XCTSkip();
#endif
    SecOTAPKIRef otapki = SecOTAPKICopyCurrentOTAPKIRef();
    XCTAssert(otapki != NULL);
    CFDictionaryRef table = SecOTAPKICopyAnchorLookupTable(otapki);
    XCTAssert(table != NULL);
    if (table) { CFRelease(table); }
    if (otapki) { CFRelease(otapki); }
}

- (void)testTrustStoreAssetVersion {
/* minimum possible version string is "0.0.0.0.1,0" */
#define MINIMUM_ASSET_VERSION_STR_LENGTH 11
#if TARGET_OS_BRIDGE
    /* bridgeOS doesn't use Mobile Asset or trust store */
    XCTSkip();
#endif
    CFStringRef assetVersion = SecTrustCopyTrustStoreAssetVersion(NULL);
    if (!assetVersion) { XCTSkip(); } /* may be NULL if we have no readable asset */
    NSUInteger assetVersionLength = [(__bridge NSString*)assetVersion length];
    XCTAssert(assetVersionLength >= MINIMUM_ASSET_VERSION_STR_LENGTH);
    if (assetVersion) { CFRelease(assetVersion); }
}

- (void)testTrustStoreContentDigest {
/* content digest uses SHA256, so hex string representation is sizeof(digest)*2 */
#define SHA256_DIGEST_STR_LENGTH 32*2
#if TARGET_OS_BRIDGE
    /* bridgeOS doesn't use Mobile Asset or trust store */
    XCTSkip();
#endif
    CFStringRef contentDigest = SecTrustCopyTrustStoreContentDigest(NULL);
    XCTAssert(contentDigest != NULL); /* trust store should always have a content digest */
    NSUInteger contentDigestLength = [(__bridge NSString*)contentDigest length];
    XCTAssert(contentDigestLength == SHA256_DIGEST_STR_LENGTH);
    if (contentDigest) { CFRelease(contentDigest); }
}

@end

@interface TrustStoreInitializationTests : TrustDaemonInitializationTestCase
@end

@implementation TrustStoreInitializationTests

- (void)testTrustStoreMigration {
#if TARGET_OS_BRIDGE || TARGET_OS_OSX
    /* bridgeOS doesn't use trust store */
    /* macOS didn't have a TrustStore.sqlite3 without the uuid, so migration isn't enabled */
    XCTSkip();
#endif
    /* Create a TrustStore.sqlite3 with the old schema (no uuid column) */
    char *schema_v1 =   "PRAGMA foreign_keys=OFF; "
                        "BEGIN TRANSACTION; "
                        "CREATE TABLE tsettings("
                        "sha256 BLOB NOT NULL DEFAULT '',"
                        "subj BLOB NOT NULL DEFAULT '',"
                        "tset BLOB,"
                        "data BLOB,"
                        "PRIMARY KEY(sha256)"
                        "); "
                        "INSERT INTO tsettings VALUES("
                        "X'43194b56f17cd0b72be548b35ae93adb1664e4023d1d7d0957f5bab66a31fe3d',"
                        "X'310b30090603550406130255533113301106035504080c0a43616c69666f726e69613116301406035504070c0d53616e204672616e636973636f310f300d060355040a0c0642616453534c3134303206035504030c2b42616453534c20556e7472757374656420526f6f7420436572746966696361746520417574686f72697479',"
                        "X'3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d38223f3e0a3c21444f435459504520706c697374205055424c494320222d2f2f4170706c652f2f44544420504c49535420312e302f2f454e222022687474703a2f2f7777772e6170706c652e636f6d2f445444732f50726f70657274794c6973742d312e302e647464223e0a3c706c6973742076657273696f6e3d22312e30223e0a3c61727261792f3e0a3c2f706c6973743e0a',"
                        "X'3082067e30820466a00302010202090097a0fcfad7e528fd300d06092a864886f70d01010b0500308181310b30090603550406130255533113301106035504080c0a43616c69666f726e69613116301406035504070c0d53616e204672616e636973636f310f300d060355040a0c0642616453534c3134303206035504030c2b42616453534c20556e7472757374656420526f6f7420436572746966696361746520417574686f72697479301e170d3136303730373036333133355a170d3336303730323036333133355a308181310b30090603550406130255533113301106035504080c0a43616c69666f726e69613116301406035504070c0d53616e204672616e636973636f310f300d060355040a0c0642616453534c3134303206035504030c2b42616453534c20556e7472757374656420526f6f7420436572746966696361746520417574686f7269747930820222300d06092a864886f70d01010105000382020f003082020a0282020100ca42d3cc8441f4ef7822b3f1c84960226ce1290ad3ac6ad0372667956da59a97c3bfe593b91809fd74556c1a7d025c01d1e9e50a60300524b6bfdc086306f59ab6740ba17698942bc18e87632c46858bc7247091eb0181bda99aa2a11435e98afcc144e46e065ff9eaff679e738b5ca70a7856b61ee47a4bebc150c63f5ac0a5e2ea6e160248b7997f95bfcec8cb96f2678bd3ab53b5376bd9acbf3f267023977c95fd7b755b903feea2721b2b64af98018c68e8ffd64d1d012919b4cc2cd0193b9b5a5340bfaa5c333f8770506496b90f04dc01369afd09e4e981db8ff31a4b99f3092991d179afb3fdc2ba5418899277932a67b3529daa51aec247e2082803c96272ecd13da9d8fac712ddab39ded830b2b8fae314f4b49a66229a9ca481b3e78ab10f045d4b5b718973dc9f8555c409cf0e63c956cf16b30cd35b792443a4019b05e1924171a301b962149c702f21b367e706f86f2573ecd2bd68d0bb85e9189f9d39112142197ef54f28c8f5f7e207caa3ade6b92828e77f611b296a810cb38fe497f0e80ad455d76f62d2d60c6d54847941ce0c9a2106d8b2b03f07d4f188beb794d88c687c81a16fe8d9e4b285f8854e3680fe4abe3620803a51f8d48d0864125877d90120180e9c63acea3eae4e319cefac6eeb8c93b80e46cae5fa38114fc17656aa11f59dc211d4317028d1e45b1f4f29990a4dc67c86d62a469e2d0203010001a381f63081f3301d0603551d0e041604146fc7837349b5a763ff75de6d6efeedfb97a32c003081b60603551d230481ae3081ab80146fc7837349b5a763ff75de6d6efeedfb97a32c00a18187a48184308181310b30090603550406130255533113301106035504080c0a43616c69666f726e69613116301406035504070c0d53616e204672616e636973636f310f300d060355040a0c0642616453534c3134303206035504030c2b42616453534c20556e7472757374656420526f6f7420436572746966696361746520417574686f7269747982090097a0fcfad7e528fd300c0603551d13040530030101ff300b0603551d0f040403020106300d06092a864886f70d01010b050003820201005053d53cfa34d14fa1fd008166eb2e74b574e0ff24b144d99e3f5132f597f88d413acabdd0f3106ff604c52e2635a96daa7e40d299755d06497f394dfec5be50386e615bbc15a25590c8a44457912f5195d9c681fb2d510c7640ac4490cac1810a9c412b165b3958f5d8ddb3a0941390a80222b8b4347fbedad875d42c37504e7e52b9e5bfbeb03844910ab96c54883f573e7559f6d3ed932d83bbbc1c2fdaa181375da52fcd800b8b3b83d78764d0d04302965e6b799e4012bd0d48b0c573f9280effc466a07b55885c3f3af56e14206efd5d97d359534756288324444fd3eef67dec8dda3d9a886a90b6ba5adf2ab96a8d789dc2b18583cc5b8866101cfc77b473d9c68339586dafa08e86decd7f883f81e15ea5504be2bddddfeadabb77557fdead6c2f90cdbfb4ef68a1acabc839ba7d13024a9a7b0250e5f5cb8a017fc98bb96b6e3f1940fbf3731d00f16f816cfc17cd5ebcec917e97fd080a88b30305f93e83c2fddac392fd8529e232b6e5920f9a8b42b6d897e805c18ecccb4129efcfb3665ae7a75346863f6b8afada1adc1b1b9f5ddd264dd3da24bc37b097876232f154061642ae102894160e04d2740116c8dd965da0453f1e5cf0a216f7912ef12856134d15542de80387a6a19da7af30572eb5127227d8e95698624911d8edad4aa53c462dd745d82934f0d6a7c64be3d2a1606628dd1fe4f7c827307898e6'"
                        "); "
                        "CREATE INDEX isubj ON tsettings(subj); "
                        "COMMIT;";

    const uint8_t _trust_server_badssl_untrusted_ca[] = {
        0x30, 0x82, 0x06, 0x7e, 0x30, 0x82, 0x04, 0x66, 0xa0, 0x03, 0x02, 0x01,
        0x02, 0x02, 0x09, 0x00, 0x97, 0xa0, 0xfc, 0xfa, 0xd7, 0xe5, 0x28, 0xfd,
        0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
        0x0b, 0x05, 0x00, 0x30, 0x81, 0x81, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
        0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x06,
        0x03, 0x55, 0x04, 0x08, 0x0c, 0x0a, 0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f,
        0x72, 0x6e, 0x69, 0x61, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04,
        0x07, 0x0c, 0x0d, 0x53, 0x61, 0x6e, 0x20, 0x46, 0x72, 0x61, 0x6e, 0x63,
        0x69, 0x73, 0x63, 0x6f, 0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55, 0x04,
        0x0a, 0x0c, 0x06, 0x42, 0x61, 0x64, 0x53, 0x53, 0x4c, 0x31, 0x34, 0x30,
        0x32, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x2b, 0x42, 0x61, 0x64, 0x53,
        0x53, 0x4c, 0x20, 0x55, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
        0x20, 0x52, 0x6f, 0x6f, 0x74, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
        0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
        0x69, 0x74, 0x79, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x36, 0x30, 0x37, 0x30,
        0x37, 0x30, 0x36, 0x33, 0x31, 0x33, 0x35, 0x5a, 0x17, 0x0d, 0x33, 0x36,
        0x30, 0x37, 0x30, 0x32, 0x30, 0x36, 0x33, 0x31, 0x33, 0x35, 0x5a, 0x30,
        0x81, 0x81, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13,
        0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08,
        0x0c, 0x0a, 0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f, 0x72, 0x6e, 0x69, 0x61,
        0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x0d, 0x53,
        0x61, 0x6e, 0x20, 0x46, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f,
        0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x06, 0x42,
        0x61, 0x64, 0x53, 0x53, 0x4c, 0x31, 0x34, 0x30, 0x32, 0x06, 0x03, 0x55,
        0x04, 0x03, 0x0c, 0x2b, 0x42, 0x61, 0x64, 0x53, 0x53, 0x4c, 0x20, 0x55,
        0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x20, 0x52, 0x6f, 0x6f,
        0x74, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
        0x65, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x30,
        0x82, 0x02, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
        0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x02, 0x0f, 0x00, 0x30,
        0x82, 0x02, 0x0a, 0x02, 0x82, 0x02, 0x01, 0x00, 0xca, 0x42, 0xd3, 0xcc,
        0x84, 0x41, 0xf4, 0xef, 0x78, 0x22, 0xb3, 0xf1, 0xc8, 0x49, 0x60, 0x22,
        0x6c, 0xe1, 0x29, 0x0a, 0xd3, 0xac, 0x6a, 0xd0, 0x37, 0x26, 0x67, 0x95,
        0x6d, 0xa5, 0x9a, 0x97, 0xc3, 0xbf, 0xe5, 0x93, 0xb9, 0x18, 0x09, 0xfd,
        0x74, 0x55, 0x6c, 0x1a, 0x7d, 0x02, 0x5c, 0x01, 0xd1, 0xe9, 0xe5, 0x0a,
        0x60, 0x30, 0x05, 0x24, 0xb6, 0xbf, 0xdc, 0x08, 0x63, 0x06, 0xf5, 0x9a,
        0xb6, 0x74, 0x0b, 0xa1, 0x76, 0x98, 0x94, 0x2b, 0xc1, 0x8e, 0x87, 0x63,
        0x2c, 0x46, 0x85, 0x8b, 0xc7, 0x24, 0x70, 0x91, 0xeb, 0x01, 0x81, 0xbd,
        0xa9, 0x9a, 0xa2, 0xa1, 0x14, 0x35, 0xe9, 0x8a, 0xfc, 0xc1, 0x44, 0xe4,
        0x6e, 0x06, 0x5f, 0xf9, 0xea, 0xff, 0x67, 0x9e, 0x73, 0x8b, 0x5c, 0xa7,
        0x0a, 0x78, 0x56, 0xb6, 0x1e, 0xe4, 0x7a, 0x4b, 0xeb, 0xc1, 0x50, 0xc6,
        0x3f, 0x5a, 0xc0, 0xa5, 0xe2, 0xea, 0x6e, 0x16, 0x02, 0x48, 0xb7, 0x99,
        0x7f, 0x95, 0xbf, 0xce, 0xc8, 0xcb, 0x96, 0xf2, 0x67, 0x8b, 0xd3, 0xab,
        0x53, 0xb5, 0x37, 0x6b, 0xd9, 0xac, 0xbf, 0x3f, 0x26, 0x70, 0x23, 0x97,
        0x7c, 0x95, 0xfd, 0x7b, 0x75, 0x5b, 0x90, 0x3f, 0xee, 0xa2, 0x72, 0x1b,
        0x2b, 0x64, 0xaf, 0x98, 0x01, 0x8c, 0x68, 0xe8, 0xff, 0xd6, 0x4d, 0x1d,
        0x01, 0x29, 0x19, 0xb4, 0xcc, 0x2c, 0xd0, 0x19, 0x3b, 0x9b, 0x5a, 0x53,
        0x40, 0xbf, 0xaa, 0x5c, 0x33, 0x3f, 0x87, 0x70, 0x50, 0x64, 0x96, 0xb9,
        0x0f, 0x04, 0xdc, 0x01, 0x36, 0x9a, 0xfd, 0x09, 0xe4, 0xe9, 0x81, 0xdb,
        0x8f, 0xf3, 0x1a, 0x4b, 0x99, 0xf3, 0x09, 0x29, 0x91, 0xd1, 0x79, 0xaf,
        0xb3, 0xfd, 0xc2, 0xba, 0x54, 0x18, 0x89, 0x92, 0x77, 0x93, 0x2a, 0x67,
        0xb3, 0x52, 0x9d, 0xaa, 0x51, 0xae, 0xc2, 0x47, 0xe2, 0x08, 0x28, 0x03,
        0xc9, 0x62, 0x72, 0xec, 0xd1, 0x3d, 0xa9, 0xd8, 0xfa, 0xc7, 0x12, 0xdd,
        0xab, 0x39, 0xde, 0xd8, 0x30, 0xb2, 0xb8, 0xfa, 0xe3, 0x14, 0xf4, 0xb4,
        0x9a, 0x66, 0x22, 0x9a, 0x9c, 0xa4, 0x81, 0xb3, 0xe7, 0x8a, 0xb1, 0x0f,
        0x04, 0x5d, 0x4b, 0x5b, 0x71, 0x89, 0x73, 0xdc, 0x9f, 0x85, 0x55, 0xc4,
        0x09, 0xcf, 0x0e, 0x63, 0xc9, 0x56, 0xcf, 0x16, 0xb3, 0x0c, 0xd3, 0x5b,
        0x79, 0x24, 0x43, 0xa4, 0x01, 0x9b, 0x05, 0xe1, 0x92, 0x41, 0x71, 0xa3,
        0x01, 0xb9, 0x62, 0x14, 0x9c, 0x70, 0x2f, 0x21, 0xb3, 0x67, 0xe7, 0x06,
        0xf8, 0x6f, 0x25, 0x73, 0xec, 0xd2, 0xbd, 0x68, 0xd0, 0xbb, 0x85, 0xe9,
        0x18, 0x9f, 0x9d, 0x39, 0x11, 0x21, 0x42, 0x19, 0x7e, 0xf5, 0x4f, 0x28,
        0xc8, 0xf5, 0xf7, 0xe2, 0x07, 0xca, 0xa3, 0xad, 0xe6, 0xb9, 0x28, 0x28,
        0xe7, 0x7f, 0x61, 0x1b, 0x29, 0x6a, 0x81, 0x0c, 0xb3, 0x8f, 0xe4, 0x97,
        0xf0, 0xe8, 0x0a, 0xd4, 0x55, 0xd7, 0x6f, 0x62, 0xd2, 0xd6, 0x0c, 0x6d,
        0x54, 0x84, 0x79, 0x41, 0xce, 0x0c, 0x9a, 0x21, 0x06, 0xd8, 0xb2, 0xb0,
        0x3f, 0x07, 0xd4, 0xf1, 0x88, 0xbe, 0xb7, 0x94, 0xd8, 0x8c, 0x68, 0x7c,
        0x81, 0xa1, 0x6f, 0xe8, 0xd9, 0xe4, 0xb2, 0x85, 0xf8, 0x85, 0x4e, 0x36,
        0x80, 0xfe, 0x4a, 0xbe, 0x36, 0x20, 0x80, 0x3a, 0x51, 0xf8, 0xd4, 0x8d,
        0x08, 0x64, 0x12, 0x58, 0x77, 0xd9, 0x01, 0x20, 0x18, 0x0e, 0x9c, 0x63,
        0xac, 0xea, 0x3e, 0xae, 0x4e, 0x31, 0x9c, 0xef, 0xac, 0x6e, 0xeb, 0x8c,
        0x93, 0xb8, 0x0e, 0x46, 0xca, 0xe5, 0xfa, 0x38, 0x11, 0x4f, 0xc1, 0x76,
        0x56, 0xaa, 0x11, 0xf5, 0x9d, 0xc2, 0x11, 0xd4, 0x31, 0x70, 0x28, 0xd1,
        0xe4, 0x5b, 0x1f, 0x4f, 0x29, 0x99, 0x0a, 0x4d, 0xc6, 0x7c, 0x86, 0xd6,
        0x2a, 0x46, 0x9e, 0x2d, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x81, 0xf6,
        0x30, 0x81, 0xf3, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16,
        0x04, 0x14, 0x6f, 0xc7, 0x83, 0x73, 0x49, 0xb5, 0xa7, 0x63, 0xff, 0x75,
        0xde, 0x6d, 0x6e, 0xfe, 0xed, 0xfb, 0x97, 0xa3, 0x2c, 0x00, 0x30, 0x81,
        0xb6, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x81, 0xae, 0x30, 0x81, 0xab,
        0x80, 0x14, 0x6f, 0xc7, 0x83, 0x73, 0x49, 0xb5, 0xa7, 0x63, 0xff, 0x75,
        0xde, 0x6d, 0x6e, 0xfe, 0xed, 0xfb, 0x97, 0xa3, 0x2c, 0x00, 0xa1, 0x81,
        0x87, 0xa4, 0x81, 0x84, 0x30, 0x81, 0x81, 0x31, 0x0b, 0x30, 0x09, 0x06,
        0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11,
        0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0a, 0x43, 0x61, 0x6c, 0x69, 0x66,
        0x6f, 0x72, 0x6e, 0x69, 0x61, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55,
        0x04, 0x07, 0x0c, 0x0d, 0x53, 0x61, 0x6e, 0x20, 0x46, 0x72, 0x61, 0x6e,
        0x63, 0x69, 0x73, 0x63, 0x6f, 0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55,
        0x04, 0x0a, 0x0c, 0x06, 0x42, 0x61, 0x64, 0x53, 0x53, 0x4c, 0x31, 0x34,
        0x30, 0x32, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x2b, 0x42, 0x61, 0x64,
        0x53, 0x53, 0x4c, 0x20, 0x55, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65,
        0x64, 0x20, 0x52, 0x6f, 0x6f, 0x74, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,
        0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6f,
        0x72, 0x69, 0x74, 0x79, 0x82, 0x09, 0x00, 0x97, 0xa0, 0xfc, 0xfa, 0xd7,
        0xe5, 0x28, 0xfd, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x04, 0x05,
        0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f,
        0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86,
        0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x02,
        0x01, 0x00, 0x50, 0x53, 0xd5, 0x3c, 0xfa, 0x34, 0xd1, 0x4f, 0xa1, 0xfd,
        0x00, 0x81, 0x66, 0xeb, 0x2e, 0x74, 0xb5, 0x74, 0xe0, 0xff, 0x24, 0xb1,
        0x44, 0xd9, 0x9e, 0x3f, 0x51, 0x32, 0xf5, 0x97, 0xf8, 0x8d, 0x41, 0x3a,
        0xca, 0xbd, 0xd0, 0xf3, 0x10, 0x6f, 0xf6, 0x04, 0xc5, 0x2e, 0x26, 0x35,
        0xa9, 0x6d, 0xaa, 0x7e, 0x40, 0xd2, 0x99, 0x75, 0x5d, 0x06, 0x49, 0x7f,
        0x39, 0x4d, 0xfe, 0xc5, 0xbe, 0x50, 0x38, 0x6e, 0x61, 0x5b, 0xbc, 0x15,
        0xa2, 0x55, 0x90, 0xc8, 0xa4, 0x44, 0x57, 0x91, 0x2f, 0x51, 0x95, 0xd9,
        0xc6, 0x81, 0xfb, 0x2d, 0x51, 0x0c, 0x76, 0x40, 0xac, 0x44, 0x90, 0xca,
        0xc1, 0x81, 0x0a, 0x9c, 0x41, 0x2b, 0x16, 0x5b, 0x39, 0x58, 0xf5, 0xd8,
        0xdd, 0xb3, 0xa0, 0x94, 0x13, 0x90, 0xa8, 0x02, 0x22, 0xb8, 0xb4, 0x34,
        0x7f, 0xbe, 0xda, 0xd8, 0x75, 0xd4, 0x2c, 0x37, 0x50, 0x4e, 0x7e, 0x52,
        0xb9, 0xe5, 0xbf, 0xbe, 0xb0, 0x38, 0x44, 0x91, 0x0a, 0xb9, 0x6c, 0x54,
        0x88, 0x3f, 0x57, 0x3e, 0x75, 0x59, 0xf6, 0xd3, 0xed, 0x93, 0x2d, 0x83,
        0xbb, 0xbc, 0x1c, 0x2f, 0xda, 0xa1, 0x81, 0x37, 0x5d, 0xa5, 0x2f, 0xcd,
        0x80, 0x0b, 0x8b, 0x3b, 0x83, 0xd7, 0x87, 0x64, 0xd0, 0xd0, 0x43, 0x02,
        0x96, 0x5e, 0x6b, 0x79, 0x9e, 0x40, 0x12, 0xbd, 0x0d, 0x48, 0xb0, 0xc5,
        0x73, 0xf9, 0x28, 0x0e, 0xff, 0xc4, 0x66, 0xa0, 0x7b, 0x55, 0x88, 0x5c,
        0x3f, 0x3a, 0xf5, 0x6e, 0x14, 0x20, 0x6e, 0xfd, 0x5d, 0x97, 0xd3, 0x59,
        0x53, 0x47, 0x56, 0x28, 0x83, 0x24, 0x44, 0x4f, 0xd3, 0xee, 0xf6, 0x7d,
        0xec, 0x8d, 0xda, 0x3d, 0x9a, 0x88, 0x6a, 0x90, 0xb6, 0xba, 0x5a, 0xdf,
        0x2a, 0xb9, 0x6a, 0x8d, 0x78, 0x9d, 0xc2, 0xb1, 0x85, 0x83, 0xcc, 0x5b,
        0x88, 0x66, 0x10, 0x1c, 0xfc, 0x77, 0xb4, 0x73, 0xd9, 0xc6, 0x83, 0x39,
        0x58, 0x6d, 0xaf, 0xa0, 0x8e, 0x86, 0xde, 0xcd, 0x7f, 0x88, 0x3f, 0x81,
        0xe1, 0x5e, 0xa5, 0x50, 0x4b, 0xe2, 0xbd, 0xdd, 0xdf, 0xea, 0xda, 0xbb,
        0x77, 0x55, 0x7f, 0xde, 0xad, 0x6c, 0x2f, 0x90, 0xcd, 0xbf, 0xb4, 0xef,
        0x68, 0xa1, 0xac, 0xab, 0xc8, 0x39, 0xba, 0x7d, 0x13, 0x02, 0x4a, 0x9a,
        0x7b, 0x02, 0x50, 0xe5, 0xf5, 0xcb, 0x8a, 0x01, 0x7f, 0xc9, 0x8b, 0xb9,
        0x6b, 0x6e, 0x3f, 0x19, 0x40, 0xfb, 0xf3, 0x73, 0x1d, 0x00, 0xf1, 0x6f,
        0x81, 0x6c, 0xfc, 0x17, 0xcd, 0x5e, 0xbc, 0xec, 0x91, 0x7e, 0x97, 0xfd,
        0x08, 0x0a, 0x88, 0xb3, 0x03, 0x05, 0xf9, 0x3e, 0x83, 0xc2, 0xfd, 0xda,
        0xc3, 0x92, 0xfd, 0x85, 0x29, 0xe2, 0x32, 0xb6, 0xe5, 0x92, 0x0f, 0x9a,
        0x8b, 0x42, 0xb6, 0xd8, 0x97, 0xe8, 0x05, 0xc1, 0x8e, 0xcc, 0xcb, 0x41,
        0x29, 0xef, 0xcf, 0xb3, 0x66, 0x5a, 0xe7, 0xa7, 0x53, 0x46, 0x86, 0x3f,
        0x6b, 0x8a, 0xfa, 0xda, 0x1a, 0xdc, 0x1b, 0x1b, 0x9f, 0x5d, 0xdd, 0x26,
        0x4d, 0xd3, 0xda, 0x24, 0xbc, 0x37, 0xb0, 0x97, 0x87, 0x62, 0x32, 0xf1,
        0x54, 0x06, 0x16, 0x42, 0xae, 0x10, 0x28, 0x94, 0x16, 0x0e, 0x04, 0xd2,
        0x74, 0x01, 0x16, 0xc8, 0xdd, 0x96, 0x5d, 0xa0, 0x45, 0x3f, 0x1e, 0x5c,
        0xf0, 0xa2, 0x16, 0xf7, 0x91, 0x2e, 0xf1, 0x28, 0x56, 0x13, 0x4d, 0x15,
        0x54, 0x2d, 0xe8, 0x03, 0x87, 0xa6, 0xa1, 0x9d, 0xa7, 0xaf, 0x30, 0x57,
        0x2e, 0xb5, 0x12, 0x72, 0x27, 0xd8, 0xe9, 0x56, 0x98, 0x62, 0x49, 0x11,
        0xd8, 0xed, 0xad, 0x4a, 0xa5, 0x3c, 0x46, 0x2d, 0xd7, 0x45, 0xd8, 0x29,
        0x34, 0xf0, 0xd6, 0xa7, 0xc6, 0x4b, 0xe3, 0xd2, 0xa1, 0x60, 0x66, 0x28,
        0xdd, 0x1f, 0xe4, 0xf7, 0xc8, 0x27, 0x30, 0x78, 0x98, 0xe6
    };

    const char path[MAXPATHLEN];
    bool pathResult = false;
    CFURLRef fileURL = SecCopyURLForFileInPrivateTrustdDirectory(CFSTR("TrustStore.sqlite3"));
    if (fileURL && CFURLGetFileSystemRepresentation(fileURL, false, (UInt8*)path, sizeof(path))) {
        pathResult = true;
    }
    CFReleaseNull(fileURL);
    XCTAssert(true == pathResult);

    sqlite3 *handle = NULL;
    int sqlite_result = sqlite3_open_v2(path, &handle, SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE, NULL);
    XCTAssertEqual(sqlite_result, SQLITE_OK);
    XCTAssert(SQLITE_OK == sqlite3_exec(handle, schema_v1, NULL, NULL, NULL));
    XCTAssert(SQLITE_OK == sqlite3_close(handle));

    /* Now call the initialization function to migrate the trust store */
    CFErrorRef error = NULL;
    XCTAssert(true == _SecTrustStoreMigrateUserStore(&error), "Trust Store migration failed: %@", error);
    CFReleaseNull(error);

    /* Verify that the trust store still returns the expected trust settings */
    SecTrustStoreRef ts = SecTrustStoreForDomainName(CFSTR("user"), &error);
    XCTAssert(NULL != ts, "Trust Store creation failed: %@", error);
    CFReleaseNull(error);
    /* Get a user-trusted certificate which should be in the user trust store we just created and migrated */
    SecCertificateRef cert = SecCertificateCreateWithBytes(kCFAllocatorDefault, _trust_server_badssl_untrusted_ca, sizeof(_trust_server_badssl_untrusted_ca));
    XCTAssert(NULL != cert, "Certificate creation failed");
    CFArrayRef usageConstraints = NULL;
    XCTAssert(true == _SecTrustStoreCopyUsageConstraints(ts, cert, &usageConstraints, &error), "CopyUsageConstraints failed: %@", error);
    CFReleaseNull(error);

    CFReleaseNull(usageConstraints);
    CFReleaseNull(cert);
}

@end

