
syntax = "proto2";

option objc_class_naming = "extended";
option objc_class_visibility = "hidden";

package OT;

message AccountMetadataClassC {

    // The state of accounts on the system is complicated. Here's how we handle them:
    //  If there is no account, we will be in NO_ACCOUNT and have no altDSID
    //  If there is an SA account, we will bt in NO_ACCOUNT and have an altDSID
    //  If there is an HSA2/Managed account, we will be in ACCOUNT_AVAILABLE and have an altDSID

    // Once you're in an HSA2/Managed account, CDP might be enabled or disabled. If it's not enabled,
    // then Octagon shouldn't be active.

    enum AccountState {
        UNKNOWN = 0;
        NO_ACCOUNT = 1;
        ACCOUNT_AVAILABLE = 2;
        ACCOUNT_AVAILABLE_UNUSED = 3;
    }

    enum TrustState {
        UNKNOWN = 0;
        UNTRUSTED = 1;
        TRUSTED = 2;
    }

    enum AttemptedAJoinState {
        UNKNOWN = 0;
        NOTATTEMPTED = 1;
        ATTEMPTED = 2;
    }

    enum CDPState {
        UNKNOWN = 0;
        DISABLED = 1;
        ENABLED = 2;
    }

    enum MetricsState {
        UNKNOWN = 0;
        PERMITTED = 1;
        NOTPERMITTED = 2;
    }

    optional string peerID = 1;
    optional AccountState icloudAccountState = 2;
    optional int64 epoch = 3;
    optional string altDSID = 4;

    optional TrustState trustState = 5;

    // Holds the time, in milliseconds since 1970, that the last health checkup query to Cuttlefish was successfully performed
    optional uint64 lastHealthCheckup = 6;

    optional AttemptedAJoinState attemptedJoin = 7;

    optional CDPState cdpState = 8;

    // Used during development
    //reserved 9;
    //reserved 10;

    // This holds the current syncing policy for the local peer, including the view list.
    optional bytes syncingPolicy = 11;

    // This might contain a voucher for use in joining Octagon.
    optional bytes voucher = 12;
    optional bytes voucherSignature = 13;

    repeated bytes tlkSharesForVouchedIdentity = 14;

    // Intended to be a TPPBSecureElementIdentity, but I can't figure out how to reference that proto from here
    optional bytes secureElementIdentity = 15;

    //reserved 16;

    // Used during development
    //reserved 17;

    // This is true if the device used inheritance key
    optional bool isInheritedAccount = 18;

    // True if we've warmed the escrow record cache for this account
    optional bool warmedEscrowCache = 19;

    // True if we've warned the user about having too many peers
    optional bool warnedTooManyPeers = 20;

    // reserved 21 (was account settings)

    // True when the device is untrusted up until the point of CKKS finishing initial sync
    optional MetricsState sendingMetricsPermitted = 22;

    optional string oldPeerID = 23;
}
