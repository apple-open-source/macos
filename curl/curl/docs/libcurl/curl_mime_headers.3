.\" generated by cd2nroff 0.1 from curl_mime_headers.md
.TH curl_mime_headers 3 "March 12 2024" libcurl
.SH NAME
curl_mime_headers \- set a mime part\(aqs custom headers
.SH SYNOPSIS
.nf
#include <curl/curl.h>

CURLcode curl_mime_headers(curl_mimepart *part,
                           struct curl_slist *headers, int take_ownership);
.fi
.SH DESCRIPTION
\fIcurl_mime_headers(3)\fP sets a mime part\(aqs custom headers.

\fIpart\fP is the part\(aqs handle to assign the custom headers list to.

\fIheaders\fP is the head of a list of custom headers; it may be set to NULL
to remove a previously attached custom header list.

\fItake_ownership\fP: when non\-zero, causes the list to be freed upon
replacement or mime structure deletion; in this case the list must not be
freed explicitly.

Setting a part\(aqs custom headers list multiple times is valid: only the value
set by the last call is retained.
.SH EXAMPLE
.nf
int main(void)
{
  struct curl_slist *headers = NULL;
  CURL *easy = curl_easy_init();
  curl_mime *mime;
  curl_mimepart *part;

  headers = curl_slist_append(headers, "Custom-Header: mooo");

  mime = curl_mime_init(easy);
  part = curl_mime_addpart(mime);

  /* use these headers in the part, takes ownership */
  curl_mime_headers(part, headers, 1);

  /* pass on this data */
  curl_mime_data(part, "12345679", CURL_ZERO_TERMINATED);

  /* set name */
  curl_mime_name(part, "numbers");

  /* Post and send it. */
  curl_easy_setopt(easy, CURLOPT_MIMEPOST, mime);
  curl_easy_setopt(easy, CURLOPT_URL, "https://example.com");
  curl_easy_perform(easy);
}
.fi
.SH AVAILABILITY
As long as at least one of HTTP, SMTP or IMAP is enabled. Added in 7.56.0.
.SH RETURN VALUE
CURLE_OK or a CURL error code upon failure.
.SH SEE ALSO
.BR curl_mime_addpart (3),
.BR curl_mime_name (3)
