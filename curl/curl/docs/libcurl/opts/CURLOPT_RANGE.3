.\" generated by cd2nroff 0.1 from CURLOPT_RANGE.md
.TH CURLOPT_RANGE 3 "March 12 2024" libcurl
.SH NAME
CURLOPT_RANGE \- byte range to request
.SH SYNOPSIS
.nf
#include <curl/curl.h>

CURLcode curl_easy_setopt(CURL *handle, CURLOPT_RANGE, char *range);
.fi
.SH DESCRIPTION
Pass a char pointer as parameter, which should contain the specified range you
want to retrieve. It should be in the format "X\-Y", where either X or Y may be
left out and X and Y are byte indexes.

HTTP transfers also support several intervals, separated with commas as in
\fI"X\-Y,N\-M"\fP. Using this kind of multiple intervals causes the HTTP server
to send the response document in pieces (using standard MIME separation
techniques). Unfortunately, the HTTP standard (RFC 7233 section 3.1) allows
servers to ignore range requests so even when you set \fICURLOPT_RANGE(3)\fP
for a request, you may end up getting the full response sent back.

For RTSP, the formatting of a range should follow RFC 2326 Section 12.29. For
RTSP, byte ranges are \fBnot\fP permitted. Instead, ranges should be given in
\fBnpt\fP, \fButc\fP, or \fBsmpte\fP formats.

For HTTP PUT uploads this option should not be used, since it may conflict with
other options.

Pass a NULL to this option to disable the use of ranges.

The application does not have to keep the string around after setting this
option.
.SH DEFAULT
NULL
.SH PROTOCOLS
HTTP, FTP, FILE, RTSP and SFTP.
.SH EXAMPLE
.nf
int main(void)
{
  CURL *curl = curl_easy_init();
  if(curl) {
    curl_easy_setopt(curl, CURLOPT_URL, "https://example.com");

    /* get the first 200 bytes */
    curl_easy_setopt(curl, CURLOPT_RANGE, "0-199");

    /* Perform the request */
    curl_easy_perform(curl);
  }
}
.fi
.SH AVAILABILITY
FILE since 7.18.0, RTSP since 7.20.0
.SH RETURN VALUE
Returns CURLE_OK on success or
CURLE_OUT_OF_MEMORY if there was insufficient heap space.
.SH SEE ALSO
.BR CURLOPT_LOW_SPEED_LIMIT (3),
.BR CURLOPT_MAXFILESIZE_LARGE (3),
.BR CURLOPT_MAX_RECV_SPEED_LARGE (3),
.BR CURLOPT_RESUME_FROM (3)
