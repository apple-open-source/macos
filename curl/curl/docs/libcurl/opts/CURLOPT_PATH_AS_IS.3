.\" generated by cd2nroff 0.1 from CURLOPT_PATH_AS_IS.md
.TH CURLOPT_PATH_AS_IS 3 "March 12 2024" libcurl
.SH NAME
CURLOPT_PATH_AS_IS \- do not handle dot dot sequences
.SH SYNOPSIS
.nf
#include <curl/curl.h>

CURLcode curl_easy_setopt(CURL *handle, CURLOPT_PATH_AS_IS, long leaveit);
.fi
.SH DESCRIPTION
Set the long \fIleaveit\fP to 1, to explicitly tell libcurl to not alter the
given path before passing it on to the server.

This instructs libcurl to NOT squash sequences of "/../" or "/./" that may
exist in the URL\(aqs path part and that is supposed to be removed according to
RFC 3986 section 5.2.4.

Some server implementations are known to (erroneously) require the dot dot
sequences to remain in the path and some clients want to pass these on in
order to try out server implementations.

By default libcurl normalizes such sequences before using the path.

The corresponding flag for the \fIcurl_url_set(3)\fP function is called
\fBCURLU_PATH_AS_IS\fP.
.SH DEFAULT
0
.SH PROTOCOLS
All
.SH EXAMPLE
.nf
int main(void)
{
  CURL *curl = curl_easy_init();
  if(curl) {
    curl_easy_setopt(curl, CURLOPT_URL,
                     "https://example.com/../../etc/password");

    curl_easy_setopt(curl, CURLOPT_PATH_AS_IS, 1L);

    curl_easy_perform(curl);
  }
}
.fi
.SH AVAILABILITY
Added in 7.42.0
.SH RETURN VALUE
Returns CURLE_OK if the option is supported, and CURLE_UNKNOWN_OPTION if not.
.SH SEE ALSO
.BR CURLOPT_DEBUGFUNCTION (3),
.BR CURLOPT_STDERR (3),
.BR CURLOPT_URL (3),
.BR curl_url_set (3)
