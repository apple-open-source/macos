.\" generated by cd2nroff 0.1 from CURLOPT_TCP_NODELAY.md
.TH CURLOPT_TCP_NODELAY 3 "March 12 2024" libcurl
.SH NAME
CURLOPT_TCP_NODELAY \- the TCP_NODELAY option
.SH SYNOPSIS
.nf
#include <curl/curl.h>

CURLcode curl_easy_setopt(CURL *handle, CURLOPT_TCP_NODELAY, long nodelay);
.fi
.SH DESCRIPTION
Pass a long specifying whether the \fITCP_NODELAY\fP option is to be set or
cleared (1L = set, 0 = clear). The option is set by default. This has no
effect after the connection has been established.

Setting this option to 1L disables TCP\(aqs Nagle algorithm on connections
created using this handle. The purpose of this algorithm is to try to minimize
the number of small packets on the network (where "small packets" means TCP
segments less than the Maximum Segment Size for the network).

Maximizing the amount of data sent per TCP segment is good because it
amortizes the overhead of the send. However, in some cases small segments may
need to be sent without delay. This is less efficient than sending larger
amounts of data at a time, and can contribute to congestion on the network if
overdone.
.SH DEFAULT
1
.SH PROTOCOLS
All
.SH EXAMPLE
.nf
int main(void)
{
  CURL *curl = curl_easy_init();
  if(curl) {
    curl_easy_setopt(curl, CURLOPT_URL, "https://example.com");
    /* leave Nagle enabled */
    curl_easy_setopt(curl, CURLOPT_TCP_NODELAY, 0);
    curl_easy_perform(curl);
  }
}
.fi
.SH AVAILABILITY
Always. The default was changed to 1 from 0 in 7.50.2.
.SH RETURN VALUE
Returns CURLE_OK
.SH SEE ALSO
.BR CURLOPT_BUFFERSIZE (3),
.BR CURLOPT_SOCKOPTFUNCTION (3),
.BR CURLOPT_TCP_KEEPALIVE (3)
