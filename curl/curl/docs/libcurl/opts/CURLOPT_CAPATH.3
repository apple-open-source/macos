.\" generated by cd2nroff 0.1 from CURLOPT_CAPATH.md
.TH CURLOPT_CAPATH 3 "March 12 2024" libcurl
.SH NAME
CURLOPT_CAPATH \- directory holding CA certificates
.SH SYNOPSIS
.nf
#include <curl/curl.h>

CURLcode curl_easy_setopt(CURL *handle, CURLOPT_CAPATH, char *capath);
.fi
.SH DESCRIPTION
Pass a char pointer to a null\-terminated string naming a directory holding
multiple CA certificates to verify the peer with. If libcurl is built against
OpenSSL, the certificate directory must be prepared using the OpenSSL c_rehash
utility. This makes sense only when used in combination with the
\fICURLOPT_SSL_VERIFYPEER(3)\fP option.

The \fICURLOPT_CAPATH(3)\fP function apparently does not work in Windows due
to some limitation in OpenSSL.

The application does not have to keep the string around after setting this
option.

The default value for this can be figured out with \fICURLINFO_CAPATH(3)\fP.
.SH DEFAULT
A default path detected at build time.
.SH PROTOCOLS
All TLS based protocols: HTTPS, FTPS, IMAPS, POP3S, SMTPS etc.
.SH EXAMPLE
.nf
int main(void)
{
  CURL *curl = curl_easy_init();
  if(curl) {
    CURLcode res;
    curl_easy_setopt(curl, CURLOPT_URL, "https://example.com/");
    curl_easy_setopt(curl, CURLOPT_CAPATH, "/etc/cert-dir");
    res = curl_easy_perform(curl);
    curl_easy_cleanup(curl);
  }
}
.fi
.SH AVAILABILITY
This option is supported by the OpenSSL, GnuTLS and mbedTLS (since 7.56.0)
backends.
.SH RETURN VALUE
CURLE_OK if supported; or an error such as:

CURLE_NOT_BUILT_IN \- Not supported by the SSL backend

CURLE_UNKNOWN_OPTION

CURLE_OUT_OF_MEMORY
.SH SEE ALSO
.BR CURLINFO_CAPATH (3),
.BR CURLOPT_CAINFO (3),
.BR CURLOPT_DEBUGFUNCTION (3),
.BR CURLOPT_STDERR (3)
