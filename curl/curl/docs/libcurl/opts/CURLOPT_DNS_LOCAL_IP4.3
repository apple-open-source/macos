.\" generated by cd2nroff 0.1 from CURLOPT_DNS_LOCAL_IP4.md
.TH CURLOPT_DNS_LOCAL_IP4 3 "March 12 2024" libcurl
.SH NAME
CURLOPT_DNS_LOCAL_IP4 \- IPv4 address to bind DNS resolves to
.SH SYNOPSIS
.nf
#include <curl/curl.h>

CURLcode curl_easy_setopt(CURL *handle, CURLOPT_DNS_LOCAL_IP4, char *address);
.fi
.SH DESCRIPTION
Set the local IPv4 \fIaddress\fP that the resolver should bind to. The argument
should be of type char * and contain a single numerical IPv4 address as a
string. Set this option to NULL to use the default setting (do not bind to a
specific IP address).

The application does not have to keep the string around after setting this
option.
.SH DEFAULT
NULL
.SH PROTOCOLS
All
.SH EXAMPLE
.nf
int main(void)
{
  CURL *curl = curl_easy_init();
  if(curl) {
    CURLcode res;
    curl_easy_setopt(curl, CURLOPT_URL, "https://example.com/foo.bin");
    curl_easy_setopt(curl, CURLOPT_DNS_LOCAL_IP4, "192.168.0.14");
    res = curl_easy_perform(curl);
    curl_easy_cleanup(curl);
  }
}
.fi
.SH AVAILABILITY
This option requires that libcurl was built with a resolver backend that
supports this operation. The c\-ares backend is the only such one.

Added in 7.33.0
.SH RETURN VALUE
Returns CURLE_OK if the option is supported, CURLE_UNKNOWN_OPTION if not,
CURLE_NOT_BUILT_IN if support was disabled at compile\-time, or
CURLE_BAD_FUNCTION_ARGUMENT when given a bad address.
.SH SEE ALSO
.BR CURLOPT_DNS_INTERFACE (3),
.BR CURLOPT_DNS_LOCAL_IP6 (3),
.BR CURLOPT_DNS_SERVERS (3)
