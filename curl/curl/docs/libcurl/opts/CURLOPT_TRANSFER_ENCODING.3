.\" generated by cd2nroff 0.1 from CURLOPT_TRANSFER_ENCODING.md
.TH CURLOPT_TRANSFER_ENCODING 3 "March 12 2024" libcurl
.SH NAME
CURLOPT_TRANSFER_ENCODING \- ask for HTTP Transfer Encoding
.SH SYNOPSIS
.nf
#include <curl/curl.h>

CURLcode curl_easy_setopt(CURL *handle, CURLOPT_TRANSFER_ENCODING,
                          long enable);
.fi
.SH DESCRIPTION
Pass a long set to 1L to \fIenable\fP or 0 to disable.

Adds a request for compressed Transfer Encoding in the outgoing HTTP
request. If the server supports this and so desires, it can respond with the
HTTP response sent using a compressed Transfer\-Encoding that is automatically
uncompressed by libcurl on reception.

Transfer\-Encoding differs slightly from the Content\-Encoding you ask for with
\fICURLOPT_ACCEPT_ENCODING(3)\fP in that a Transfer\-Encoding is strictly meant
to be for the transfer and thus MUST be decoded before the data arrives in the
client. Traditionally, Transfer\-Encoding has been much less used and supported
by both HTTP clients and HTTP servers.
.SH DEFAULT
0
.SH PROTOCOLS
HTTP
.SH EXAMPLE
.nf
int main(void)
{
  CURL *curl = curl_easy_init();
  if(curl) {
    curl_easy_setopt(curl, CURLOPT_URL, "https://example.com");
    curl_easy_setopt(curl, CURLOPT_TRANSFER_ENCODING, 1L);
    curl_easy_perform(curl);
  }
}
.fi
.SH AVAILABILITY
Added in 7.21.6
.SH RETURN VALUE
Returns CURLE_OK if the option is supported, and CURLE_UNKNOWN_OPTION if not.
.SH SEE ALSO
.BR CURLOPT_ACCEPT_ENCODING (3),
.BR CURLOPT_HTTP_TRANSFER_DECODING (3)
