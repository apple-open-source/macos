.\" generated by cd2nroff 0.1 from curl_easy_unescape.md
.TH curl_easy_unescape 3 "March 12 2024" libcurl
.SH NAME
curl_easy_unescape \- URL decodes the given string
.SH SYNOPSIS
.nf
#include <curl/curl.h>

char *curl_easy_unescape(CURL *curl, const char *input,
                         int inlength, int *outlength);
.fi
.SH DESCRIPTION
This function converts the URL encoded string \fBinput\fP to a "plain string"
and returns that in an allocated memory area. All input characters that are URL
encoded (%XX where XX is a two\-digit hexadecimal number) are converted to their
binary versions.

If the \fBlength\fP argument is set to 0 (zero), \fIcurl_easy_unescape(3)\fP
uses strlen() on \fBinput\fP to find out the size.

If \fBoutlength\fP is non\-NULL, the function writes the length of the returned
string in the integer it points to. This allows proper handling even for
strings containing %00. Since this is a pointer to an \fIint\fP type, it can
only return a value up to \fIINT_MAX\fP so no longer string can be returned in
this parameter.

Since 7.82.0, the \fBcurl\fP parameter is ignored. Prior to that there was
per\-handle character conversion support for some old operating systems such as
TPF, but it was otherwise ignored.

You must \fIcurl_free(3)\fP the returned string when you are done with it.
.SH EXAMPLE
.nf
int main(void)
{
  CURL *curl = curl_easy_init();
  if(curl) {
    int decodelen;
    char *decoded = curl_easy_unescape(curl, "%63%75%72%6c", 12, &decodelen);
    if(decoded) {
      /* do not assume printf() works on the decoded data! */
      printf("Decoded: ");
      /* ... */
      curl_free(decoded);
    }
    curl_easy_cleanup(curl);
  }
}
.fi
.SH AVAILABILITY
Added in 7.15.4 and replaces the old \fIcurl_unescape(3)\fP function.
.SH RETURN VALUE
A pointer to a null\-terminated string or NULL if it failed.
.SH SEE ALSO
.BR curl_easy_escape (3),
.BR curl_free (3)
