/*
 * Copyright (c) 2019-2019 Apple Inc. All rights reserved.
 *
 * @APPLE_OSREFERENCE_LICENSE_HEADER_START@
 *
 * This file contains Original Code and/or Modifications of Original Code
 * as defined in and that are subject to the Apple Public Source License
 * Version 2.0 (the 'License'). You may not use this file except in
 * compliance with the License. The rights granted to you under the License
 * may not be used to create, or enable the creation or redistribution of,
 * unlawful or unlicensed copies of an Apple operating system, or to
 * circumvent, violate, or enable the circumvention or violation of, any
 * terms of an Apple operating system software license agreement.
 *
 * Please obtain a copy of the License at
 * http://www.opensource.apple.com/apsl/ and read it before using this file.
 *
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
 * Please see the License for the specific language governing rights and
 * limitations under the License.
 *
 * @APPLE_OSREFERENCE_LICENSE_HEADER_END@
 */

#ifndef _IOKIT_UIOPCIDEVICE_H
#define _IOKIT_UIOPCIDEVICE_H

#include <DriverKit/IOTypes.h>
#include <DriverKit/IOService.iig>
#include <DriverKit/IOMemoryDescriptor.iig>

/*!
 * @brief Options for <code>SaveDeviceState</code>
 *
 * @constant kPCIConfigShadowPermanent - Re-use the saved device state in all future restores (until the next permanent copy is made)
 */
enum IOPCISaveDeviceStateOptions
{
    kPCIConfigShadowPermanent = 0x80000000,
};

/*!
 * @brief BAR indexes for <code>GetBARInfo</code>
 */
enum IOPCIMemoryRange
{
    kPCIMemoryRangeBAR0         = 0,
    kPCIMemoryRangeBAR1         = 1,
    kPCIMemoryRangeBAR2         = 2,
    kPCIMemoryRangeBAR3         = 3,
    kPCIMemoryRangeBAR4         = 4,
    kPCIMemoryRangeBAR5         = 5,
    kPCIMemoryRangeExpansionROM = 6,
};

/*!
 * @brief BAR types for <code>GetBARInfo</code>
 */
enum IOPCIBARType
{
    kPCIBARTypeM32   = 0x00, /* 32-bit (Non-prefetchable) Memory */
    kPCIBARTypeIO    = 0x01, /* I/O Space */
    kPCIBARTypeM64   = 0x04, /* 64-bit (Non-prefetchable) Memory */
    kPCIBARTypeM32PF = 0x08, /* 32-bit Prefetchable Memory */
    kPCIBARTypeM64PF = 0x0c, /* 64-bit Prefetchable Memory */
};

/*!
 * @brief Link speeds for <code>SetLinkSpeed</code> and <code>GetLinkSpeed</code>
 */
enum IOPCILinkSpeed
{
    kPCILinkSpeed_2_5_GTs = 1, // Gen 1
    kPCILinkSpeed_5_GTs,       // Gen 2
    kPCILinkSpeed_8_GTs,       // Gen 3
    kPCILinkSpeed_16_GTs,      // Gen 4
    kPCILinkSpeed_32_GTs,      // Gen 5
};

/*!
   @iig implementation
   #if KERNEL
   #include <IOKit/pci/IOPCIDevice.h>
   #endif
   @iig end
 */

class KERNEL IOPCIDevice : public IOService
{
public:
#pragma mark IOService Overrides
    virtual bool
    init() override;

    virtual void
    free() override;

    virtual kern_return_t
    ClientCrashed(IOService * client, uint64_t options) override;

    /*!
     * @brief       Send a dictionary of properties to an IOService.
     * @discussion  Can set only properties defined in IOPCIFamilyDefinitions.h
     * @param       properties Dictionary of properties.
     * @return      kIOReturnSuccess if at least one key/value pair is successful. See IOReturn.h for error codes.
     */
    virtual kern_return_t
    SetProperties(OSDictionary * properties) override;

#pragma mark Session Management
    /*!
     * @brief       Open a session to the IOPCIDevice
     * @discussion  This method opens a session to an IOPCIDevice for exclusive access and
     *              allow access to the PCI Device's configuration and aperture space.
     * @param       forClient The IOService that is opening a session.
     * @param       options See IOService.h
     * @return      KERN_SUCCESS is successful see IOReturn.h for error codes.
     */
    kern_return_t
    Open(IOService*   forClient,
         IOOptionBits options = 0) LOCALONLY;


    /*!
     * @brief       Close a session to the IOPCIDevice
     * @discussion  This method closes an open session to an IOPCIDevice. Closing the open session will also turn off the Bus Lead Enable and
     *              Memory Space Enable bits defined in the command register in the PCI spec
     * @param       forClient The IOService that is closing its session.
     * @param       options See IOService.h
     * @return      KERN_SUCCESS is successful see IOReturn.h for error codes.
     */
    void
    Close(IOService*   forClient,
          IOOptionBits options = 0) LOCALONLY;

#pragma mark Memory Accessors
    /*!
     * @brief       Reads a 32-bit value from the PCI device's configuration space.
     * @discussion  This method reads a 32-bit configuration space register on the device and returns its value. This is a blocking call.
     * @param       offset An offset into configuration space, of which bits 0-1 are ignored.
     * @param       readData An out parameter containing the 32-bit value in host byte order. -1 is written to readData on error.
     */
    void
    ConfigurationRead32(uint64_t offset, uint32_t* readData) LOCALONLY;

    /*!
     * @brief       Reads a 16-bit value from the PCI device's configuration space.
     * @discussion  This method reads a 16-bit configuration space register on the device and returns its value. This is a blocking call.
     * @param       offset An offset into configuration space, of which bits 0-1 are ignored.
     * @param       readData An out parameter containing the 16-bit value in host byte order. -1 is written to readData on error.
     */
    void
    ConfigurationRead16(uint64_t offset, uint16_t* readData) LOCALONLY;

    /*!
     * @brief       Reads an 8-bit value from the PCI device's configuration space.
     * @discussion  This method reads a 8-bit configuration space register on the device and returns its value. This is a blocking call.
     * @param       offset An offset into configuration space, of which bits 0-1 are ignored.
     * @param       readData An out parameter containing the 8-bit value in host byte order. -1 is written to readData on error.
     */
    void
    ConfigurationRead8(uint64_t offset, uint8_t* readData) LOCALONLY;

    /*!
     * @brief       Writes a 32-bit value to the PCI device's configuration space.
     * @discussion  This method writes a 32-bit value to a configuration space register on the device.
     * @param       offset An offset into configuration space, of which bits 0-1 are ignored.
     * @param       data A 32-bit value to be written in host byte order.
     */
    void
    ConfigurationWrite32(uint64_t offset,
                         uint32_t data) LOCALONLY;

    /*!
     * @brief       Writes a 16-bit value to the PCI device's configuration space.
     * @discussion  This method writes a 16-bit value to a configuration space register on the device.
     * @param       offset An offset into configuration space, of which bits 0-1 are ignored.
     * @param       data A 16-bit value to be written in host byte order.
     */
    void
    ConfigurationWrite16(uint64_t offset,
                         uint16_t data) LOCALONLY;

    /*!
     * @brief       Writes an 8-bit value to the PCI device's configuration space.
     * @discussion  This method writes an 8-bit value to a configuration space register on the device.
     * @param       offset An offset into configuration space, of which bits 0-1 are ignored.
     * @param       data An 8-bit value to be written in host byte order.
     */
    void
    ConfigurationWrite8(uint64_t offset,
                        uint8_t  data) LOCALONLY;

    /*!
     * @brief       Reads a 64-bit value from the PCI device's aperture at a given memory index.
     * @discussion  This method reads a 64-bit register on the device and returns its value. This is a blocking call.
     * @param       memoryIndex An index into the array of ranges assigned to the device.
     * @param       offset An offset into the device's memory specified by the index.
     * @param       readData An out parameter containing the 64-bit value in host byte order. -1 is written to readData on error.
     */
    void
    MemoryRead64(uint8_t   memoryIndex,
                 uint64_t  offset,
                 uint64_t* readData) LOCALONLY;

    /*!
     * @brief       Reads a 64-bit value from the PCI device's aperture at a given memory index.
     * @discussion  This method reads a 64-bit register on the device and returns its value. This is a blocking call.
     * @param       memoryIndex An index into the array of ranges assigned to the device.
     * @param       offset An offset into the device's memory specified by the index.
     * @param       readData An out parameter containing the 64-bit value in host byte order. -1 is written to readData on error.
     * @param       options Optional access options (see enum tIOPCIAccessOptions).
     */
    void
    MemoryRead64(uint8_t   memoryIndex,
                 uint64_t  offset,
                 uint64_t* readData,
                 IOOptionBits options) LOCALONLY;

    /*!
     * @brief       Reads a 32-bit value from the PCI device's aperture at a given memory index.
     * @discussion  This method reads a 32-bit register on the device and returns its value. This is a blocking call.
     * @param       memoryIndex An index into the array of ranges assigned to the device.
     * @param       offset An offset into the device's memory specified by the index.
     * @param       readData An out parameter containing the 32-bit value in host byte order. -1 is written to readData on error.
     */
    void
    MemoryRead32(uint8_t   memoryIndex,
                 uint64_t  offset,
                 uint32_t* readData) LOCALONLY;

    /*!
     * @brief       Reads a 32-bit value from the PCI device's aperture at a given memory index.
     * @discussion  This method reads a 32-bit register on the device and returns its value. This is a blocking call.
     * @param       memoryIndex An index into the array of ranges assigned to the device.
     * @param       offset An offset into the device's memory specified by the index.
     * @param       readData An out parameter containing the 32-bit value in host byte order. -1 is written to readData on error.
     * @param       options Optional access options (see enum tIOPCIAccessOptions).
     */
    void
    MemoryRead32(uint8_t   memoryIndex,
                 uint64_t  offset,
                 uint32_t* readData,
                 IOOptionBits options) LOCALONLY;

    /*!
     * @brief       Reads a 16-bit value from the PCI device's aperture at a given memory index.
     * @discussion  This method reads a 16-bit register on the device and returns its value. This is a blocking call.
     * @param       memoryIndex An index into the array of ranges assigned to the device.
     * @param       offset An offset into the device's memory specified by the index.
     * @param       readData An out parameter containing the 16-bit value in host byte order. -1 is written to readData on error.
     */
    void
    MemoryRead16(uint8_t   memoryIndex,
                 uint64_t  offset,
                 uint16_t* readData) LOCALONLY;

    /*!
     * @brief       Reads a 16-bit value from the PCI device's aperture at a given memory index.
     * @discussion  This method reads a 16-bit register on the device and returns its value. This is a blocking call.
     * @param       memoryIndex An index into the array of ranges assigned to the device.
     * @param       offset An offset into the device's memory specified by the index.
     * @param       readData An out parameter containing the 16-bit value in host byte order. -1 is written to readData on error.
     * @param       options Optional access options (see enum tIOPCIAccessOptions).
     */
    void
    MemoryRead16(uint8_t   memoryIndex,
                 uint64_t  offset,
                 uint16_t* readData,
                 IOOptionBits options) LOCALONLY;

    /*!
     * @brief       Reads an 8-bit value from the PCI device's aperture at a given memory index.
     * @discussion  This method reads an 8-bit register on the device and returns its value. This is a blocking call.
     * @param       memoryIndex An index into the array of ranges assigned to the device.
     * @param       offset An offset into the device's memory specified by the index.
     * @param       readData An out parameter containing the 8-bit. -1 is written to readData on error.
     */
    void
    MemoryRead8(uint8_t  memoryIndex,
                uint64_t offset,
                uint8_t* readData) LOCALONLY;

    /*!
     * @brief       Reads an 8-bit value from the PCI device's aperture at a given memory index.
     * @discussion  This method reads an 8-bit register on the device and returns its value. This is a blocking call.
     * @param       memoryIndex An index into the array of ranges assigned to the device.
     * @param       offset An offset into the device's memory specified by the index.
     * @param       readData An out parameter containing the 8-bit. -1 is written to readData on error.
     * @param       options Optional access options (see enum tIOPCIAccessOptions).
     */
    void
    MemoryRead8(uint8_t  memoryIndex,
                uint64_t offset,
                uint8_t* readData,
                 IOOptionBits options) LOCALONLY;

    /*!
     * @brief       Writes a 64-bit value to the PCI device's aperture at a given memory index.
     * @discussion  This method writes a 64-bit register on the device and returns its value.
     * @param       memoryIndex An index into the array of ranges assigned to the device
     * @param       offset An offset into the device's memory specified by the index.
     * @param       data A 64-bit value to be written in host byte order.
     */
    void
    MemoryWrite64(uint8_t  memoryIndex,
                  uint64_t offset,
                  uint64_t data) LOCALONLY;

    /*!
     * @brief       Writes a 64-bit value to the PCI device's aperture at a given memory index.
     * @discussion  This method writes a 64-bit register on the device and returns its value.
     * @param       memoryIndex An index into the array of ranges assigned to the device
     * @param       offset An offset into the device's memory specified by the index.
     * @param       data A 64-bit value to be written in host byte order.
     * @param       options Optional access options (see enum tIOPCIAccessOptions).
     */
    void
    MemoryWrite64(uint8_t  memoryIndex,
                  uint64_t offset,
                  uint64_t data,
                  IOOptionBits options) LOCALONLY;

    /*!
     * @brief       Writes a 32-bit value to the PCI device's aperture at a given memory index.
     * @discussion  This method writes a 32-bit register on the device and returns its value.
     * @param       memoryIndex An index into the array of ranges assigned to the device.
     * @param       offset An offset into the device's memory specified by the index.
     * @param       data A 32-bit value to be written in host byte order.
     */
    void
    MemoryWrite32(uint8_t  memoryIndex,
                  uint64_t offset,
                  uint32_t data) LOCALONLY;

    /*!
     * @brief       Writes a 32-bit value to the PCI device's aperture at a given memory index.
     * @discussion  This method writes a 32-bit register on the device and returns its value.
     * @param       memoryIndex An index into the array of ranges assigned to the device.
     * @param       offset An offset into the device's memory specified by the index.
     * @param       data A 32-bit value to be written in host byte order.
     * @param       options Optional access options (see enum tIOPCIAccessOptions).
     */
    void
    MemoryWrite32(uint8_t  memoryIndex,
                  uint64_t offset,
                  uint32_t data,
                  IOOptionBits options) LOCALONLY;

    /*!
     * @brief       Writes a 16-bit value to the PCI device's aperture at a given memory index.
     * @discussion  This method writes a 16-bit register on the device and returns its value.
     * @param       memoryIndex An index into the array of ranges assigned to the device.
     * @param       offset An offset into the device's memory specified by the index.
     * @param       data A 16-bit value to be written in host byte order.
     */
    void
    MemoryWrite16(uint8_t  memoryIndex,
                  uint64_t offset,
                  uint16_t data) LOCALONLY;

    /*!
     * @brief       Writes a 16-bit value to the PCI device's aperture at a given memory index.
     * @discussion  This method writes a 16-bit register on the device and returns its value.
     * @param       memoryIndex An index into the array of ranges assigned to the device.
     * @param       offset An offset into the device's memory specified by the index.
     * @param       data A 16-bit value to be written in host byte order.
     * @param       options Optional access options (see enum tIOPCIAccessOptions).
     */
    void
    MemoryWrite16(uint8_t  memoryIndex,
                  uint64_t offset,
                  uint16_t data,
                  IOOptionBits options) LOCALONLY;

    /*!
     * @brief       Writes an 8-bit value to the PCI device's aperture at a given memory index.
     * @discussion  This method writes an 8-bit register on the device and returns its value.
     * @param       memoryIndex An index into the array of ranges assigned to the device
     * @param       offset An offset into the device's memory specified by the index.
     * @param       data An 8-bit value.
     */
    void
    MemoryWrite8(uint8_t  memoryIndex,
                 uint64_t offset,
                 uint8_t  data) LOCALONLY;

    /*!
     * @brief       Writes an 8-bit value to the PCI device's aperture at a given memory index.
     * @discussion  This method writes an 8-bit register on the device and returns its value.
     * @param       memoryIndex An index into the array of ranges assigned to the device
     * @param       offset An offset into the device's memory specified by the index.
     * @param       data An 8-bit value.
     * @param       options Optional access options (see enum tIOPCIAccessOptions).
     */
    void
    MemoryWrite8(uint8_t  memoryIndex,
                 uint64_t offset,
                 uint8_t  data,
                 IOOptionBits options) LOCALONLY;

#pragma mark Configuration Space helpers

    /*!
     * @brief       Search configuration space for a PCI capability register.
     * @discussion  This method searches the device's configuration space for a PCI capability register matching the passed capability ID, if the device supports PCI capabilities.
     * @param       capabilityID A PCI capability ID. PCI Express devices may support extended capabilities in configuration space starting at offset 0x100.
     *              To search this space, the ID passed should be the negated value of the PCI-SIG assigned ID for the extended capability.
     * @param       searchOffset The offset into configuration space to start the next capability search.
     * @param       foundCapabilityOffset An optional out parameter to return the offset into configuration space where the capability was found. The offset can be used
     *              in the searchOffset parameter to find all capability blocks that may exist on the device with the same ID.
     * @result      kIOReturnSuccess if the capabilityID is found.
     */
    virtual kern_return_t
    FindPCICapability(uint32_t  capabilityID,
                      uint64_t  searchOffset,
                      uint64_t* foundCapabilityOffset);

    /*!
     * @brief       Accessor to return the PCI device's bus, device, and function number.
     * @discussion  This method is an accessor to return the PCI device's  bus, device and function number.
     * @param       returnBusNumber An optional out parameter to be filled with the device's bus number.
     * @param       returnDeviceNumber An optional out parameter to be filled with the device's device number.
     * @param       returnFunctionNumber An optional out parameter to be filled with the device's function number.
     * @result      kIOReturnSuccess if there were no errors.
     */
    virtual kern_return_t
    GetBusDeviceFunction(uint8_t* returnBusNumber,
                         uint8_t* returnDeviceNumber,
                         uint8_t* returnFunctionNumber);

#pragma mark Power Management

    /*!
     * @brief       Determine whether or not the device supports PCI Bus Power Management.
     * @discussion  This method will look at the device's capabilties registers and determine whether or not the device supports the PCI BUS Power Management Specification.
     * @param       state Check for support of a specific state (e.g. kPCIPMCPMESupportFromD3Cold). If state is 0, then check for a property in the registry
     *              which tells which state the hardware expects the device to go to during sleep.
     * @result      kIOReturnSuccess if the specified state is supported.
     */
    virtual kern_return_t
    HasPCIPowerManagement(uint64_t state);

    /*!
     * @brief       Enable PCI power management for sleep state
     * @discussion  This method will enable PCI Bus Powermanagement when going to sleep mode.
     * @param       state Enables PCI Power Management by placing the function in the given state (e.g. kPCIPMCSPowerStateD3). If state is 0xffffffff, then
     *              the IOPCIDevice determines the desired state. If state is kPCIPMCSPowerStateD0 (0) then PCI Power Management is disabled.
     * @result      kIOReturnSuccess if there were no errors.
     */
    virtual kern_return_t
    EnablePCIPowerManagement(uint64_t state);

#pragma mark State Management

    /*!
     * @brief       Save the PCIe state of the device.
     * @discussion  This method will save the device's Configuration Space into memory, to be restored at a later point (for example, after a Function Level Reset) with RestoreDeviceState().
     * @param       options See IOPCISaveDeviceStateOptions
     * @result      kIOReturnSuccess if the save was succesful.
     */
    virtual kern_return_t
    SaveDeviceState(IOOptionBits options = 0);

    /*!
     * @brief       Restore the PCIe state of the device.
     * @discussion  This method will restore the device's Configuration Space from memory, using the last saved state from SaveDeviceState().
     * @param       options Reserved for future use
     * @result      kIOReturnSuccess if there were no errors.
     */
    virtual kern_return_t
    RestoreDeviceState(IOOptionBits options = 0);

#pragma mark Memory Accessor helpers

    /*!
     * @brief       Lookup information related to the device BAR.
     * @discussion  This method returns the device memory index (used by the MemoryReadXX/MemoryWriteXX functions), type, and size of the user-specified BAR.
     * @param       barIndex See enum IOPCIMemoryRange.
     * @param       memoryIndex An out parameter to return the memory index, if the function is successful.
     * @param       barSize An out parameter to return the BAR size (bytes), if the function is successful. Not applicable for Expansion ROM.
     * @param       barType An out parameter to return the BAR type, if the function is successful. See enum IOPCIBARType. Not applicable for Expansion ROM.
     * @result      kIOReturnSuccess if the requested index is found.
     */
    virtual kern_return_t
    GetBARInfo(uint8_t   barIndex,
               uint8_t*  memoryIndex,
               uint64_t* barSize = 0,
               uint8_t*  barType = 0);

#pragma mark Link Management

    /*! @function SetLinkSpeed
     *   @abstract    Set the link speed upper bound and optionally retrain
     *   @discussion  This function writes the device's upstream bridge's target-link-speed. This setting will be enforced during subsequent
     *                reset-initiated link trainings, and the function will immediately retrain the link if the retrain parameter is true.
     *                If retrain is true, this function will not return until training completes. The user must call IOPCIDevice::GetLinkSpeed() to
     *                see the result of link training; a return value of kIOReturnSuccess does not indicate the requested link speed was reached.
     *   @param       linkSpeed A IOPCILinkSpeed.
     *   @param       retrain If true, the function will retrain the link.
     *   @result      kIOReturnSuccess if there were no errors, such as linkSpeed unsupported by the upstream bridge. kIOReturnSuccess does not
     *                indicate the requested link speed was reached.
     */
    virtual kern_return_t
    SetLinkSpeed(IOPCILinkSpeed linkSpeed,
                 bool           retrain = false);

    /*! @function GetLinkSpeed
     *   @abstract  Get the endpoint's link speed
     *   @param     linkSpeed A pointer to a IOPCILinkSpeed.
     *   @result    Returns an IOReturn code indicating success or failure.
     */
    virtual kern_return_t
    GetLinkSpeed(IOPCILinkSpeed *linkSpeed);

#pragma mark Interrupts Allocation

    /*!
     * @brief       Configure interrupts
     * @discussion  This method allocates interrupts based on the passed parameters and the device's capabilities, i.e. MSI(X).
     * @param       interruptType kIOInterruptTypeLevel, kIOInterruptTypePCIMessaged or kIOInterruptTypePCIMessagedX.
     * @param       numRequired The minimum number of vectors for allocation to succeed.
     * @param       numRequested The desired number of vectors to allocate.
     * @param       options Unused.
     * @result      kIOReturnSuccess if there were no errors.
     */
    virtual kern_return_t
    ConfigureInterrupts(uint32_t interruptType,
                        uint32_t numRequired  = 1,
                        uint32_t numRequested = 1,
                        IOOptionBits options  = 0);

#pragma mark Reset

    /*! @function reset
     *   @abstract     Reset the PCIe device.
     *   @discussion   If this is a multi-function device, all functions associated with the device will be reset.
     *                 Device configuration state is saved prior to resetting the device and restored after reset completes.
     *                 During reset, the caller must not attempt to access the device.
     *                 This call will block until the link comes up and the device is usable (except for type kIOPCIDeviceResetTypeWarmResetDisable).
     *   @param type     tIOPCIDeviceResetTypes.
     *   @param options  tIOPCIDeviceResetOptions.
     *   @return       kIOReturnSuccess if the reset specified is supported
     */
    virtual kern_return_t
    Reset(IOOptionBits type,
          IOOptionBits options = 0);

#pragma mark Active State Power Management

    /*!
     * @brief       Configure ASPM settings.
     * @discussion  This method will enable/disable ASPM L0s and L1, on the device and its upstream bridge, if both
     *              are capable of the requested ASPM level(s). When ASPM is enabled, this method will also enable any L1 substates that
     *              both link partners are capable of, and disable L1 substates when ASPM is disabled.
     * @param       aspmLinkControl The level of ASPM to be enabled on the link. (See tIOPCILinkControlASPMBits.)
     * @result      kIOReturnSuccess if there were no errors.
     */
    virtual kern_return_t
    SetASPMState(IOOptionBits aspmLinkControl);
};

#pragma mark Private Class Extension
class
    EXTENDS (IOPCIDevice)IOPCIDevicePrivate
{
    virtual kern_return_t
    _MemoryAccess(uint64_t     operation,
                  uint64_t     offset,
                  uint64_t     data,
                  uint64_t*    readData,
                  IOService*   forClient,
                  IOOptionBits options) final;

    virtual kern_return_t
    _CopyDeviceMemoryWithIndex(uint64_t             memoryIndex,
                               IOMemoryDescriptor** returnMemory,
                               IOService*           forClient) final;

    virtual kern_return_t
    _ManageSession(IOService*   forClient,
                   bool         openClient,
                   IOOptionBits openOptions) final;

};

#endif /* ! _IOKIT_UIOPCIDEVICE_H */
