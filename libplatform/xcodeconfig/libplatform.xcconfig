#include "<DEVELOPER_DIR>/Makefiles/CoreOS/Xcode/BSD.xcconfig"

VERSIONING_SYSTEM = ""

// Standard settings
SDKROOT = macosx.internal
SUPPORTED_PLATFORMS = macosx iphoneos iphonesimulator appletvos appletvsimulator watchos watchsimulator driverkit
BUILD_VARIANTS = normal debug dyld static

EXECUTABLE_PREFIX = lib

SDK_INSTALL_ROOT[sdk=driverkit*] = $(DRIVERKITROOT)
SDK_INSTALL_HEADERS_ROOT[sdk=driverkit*] = $(SDK_INSTALL_ROOT)/$(SDK_RUNTIME_HEADERS_PREFIX)
SDK_RUNTIME_HEADERS_PREFIX = Runtime

INSTALL_PATH = $(SDK_INSTALL_ROOT)/usr/lib/system
PUBLIC_HEADERS_FOLDER_PATH=$(SDK_INSTALL_HEADERS_ROOT)/usr/include
PRIVATE_HEADERS_FOLDER_PATH=$(SDK_INSTALL_HEADERS_ROOT)/usr/local/include

USE_HEADERMAP = NO
SKIP_INSTALL = YES
INSTALLHDRS_SCRIPT_PHASE = YES

GCC_OPTIMIZATION_LEVEL = s

GCC_STRICT_ALIASING = YES
GCC_WARN_SHADOW = YES
GCC_WARN_ABOUT_RETURN_TYPE = YES
GCC_WARN_ABOUT_MISSING_NEWLINE = YES
GCC_WARN_UNUSED_PARAMETER = NO
GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES
GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS = YES
GCC_WARN_UNINITIALIZED_AUTOS = YES
CLANG_WARN_EMPTY_BODY = YES
GCC_TREAT_WARNINGS_AS_ERRORS = YES
WARNING_CFLAGS = -Wall -Waggregate-return -Wfloat-equal -Wpacked -Wmissing-declarations -Wstrict-aliasing=2 -Wno-unknown-warning-option -Wno-atomic-implicit-seq-cst -Wformat=2

// TODO: Remove -fno-stack-protector once it has been moved down (after libproc is moved down)
OTHER_CFLAGS = -fno-stack-protector -fdollars-in-identifiers -fno-common -fverbose-asm $(COMPILER_CFLAGS) $(PLATFORM_CFLAGS)
OTHER_CFLAGS_normal = -momit-leaf-frame-pointer
OTHER_CFLAGS_debug = -fno-inline -O0

GCC_PREPROCESSOR_DEFINITIONS = _FORTIFY_SOURCE=0 $(OSATOMIC_PREPROCESSOR_DEFINITIONS) $(PLATFORM_PREPROCESSOR_DEFINITIONS) $(GCC_PREPROCESSOR_DEFINITIONS_$(CURRENT_VARIANT))
GCC_PREPROCESSOR_DEFINITIONS_dyld = VARIANT_DYLD=1 VARIANT_NO_RESOLVERS=1 VARIANT_STATIC=1
GCC_PREPROCESSOR_DEFINITIONS_static = VARIANT_NO_RESOLVERS=1 VARIANT_STATIC=1
GCC_PREPROCESSOR_DEFINITIONS_debug = DEBUG=1

OSATOMIC_PREPROCESSOR_DEFINITIONS = OSATOMIC_USE_INLINED=0 OSATOMIC_DEPRECATED=0 OSSPINLOCK_USE_INLINED=1 OS_UNFAIR_LOCK_INLINE=0

STRIP_INSTALLED_PRODUCT = $(STRIP_INSTALLED_PRODUCT_$(CURRENT_VARIANT))
STRIP_INSTALLED_PRODUCT_normal = YES
STRIP_INSTALLED_PRODUCT_dyld = NO
STRIP_INSTALLED_PRODUCT_static = NO
STRIP_INSTALLED_PRODUCT_debug = YES

SRCROOT_SEARCH_PATHS = $(SRCROOT)/private $(SRCROOT)/include $(SRCROOT)/internal
HEADER_SEARCH_PATHS = $(SRCROOT_SEARCH_PATHS) $(inherited)
SYSTEM_HEADER_SEARCH_PATHS = $(SDKROOT)/$(SDK_INSTALL_HEADERS_ROOT)/System/Library/Frameworks/System.framework/PrivateHeaders
SYSTEM_HEADER_SEARCH_PATHS[sdk=driverkit*] = $(SDKROOT)/$(SDK_INSTALL_HEADERS_ROOT)/System/Library/Frameworks/System.framework/PrivateHeaders $(SDKROOT)/$(SDK_INSTALL_HEADERS_ROOT)/usr/local/include $(SDKROOT)/$(SDK_INSTALL_HEADERS_ROOT)/usr/include
SYSTEM_FRAMEWORK_SEARCH_PATHS[sdk=driverkit*] = $(SDKROOT)/$(SDK_INSTALL_HEADERS_ROOT)/System/Library/Frameworks

DEAD_CODE_STRIPPING = NO

LINK_WITH_STANDARD_LIBRARIES = NO
DYLIB_CURRENT_VERSION = $(CURRENT_PROJECT_VERSION)

PLATFORM_LIBRARIES = $(CONFIGURATION_BUILD_DIR)/libsimple_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libatomics_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libcachecontrol_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libos_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libsetjmp_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libstring_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libucontext_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libtimingsafe_$(CURRENT_VARIANT).a
ATOMICS_LIBRARIES = $(CONFIGURATION_BUILD_DIR)/libatomics_i386_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libatomics_x86_64_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libatomics_arm_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libatomics_arm64_$(CURRENT_VARIANT).a $(EXTRA_ATOMICS_LIBRARIES)
CACHECONTROL_LIBRARIES = $(CONFIGURATION_BUILD_DIR)/libcachecontrol_i386_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libcachecontrol_x86_64_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libcachecontrol_arm_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libcachecontrol_arm64_$(CURRENT_VARIANT).a $(EXTRA_CACHECONTROL_LIBRARIES)
SETJMP_LIBRARIES = $(CONFIGURATION_BUILD_DIR)/libsetjmp_i386_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libsetjmp_x86_64_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libsetjmp_arm_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libsetjmp_arm64_$(CURRENT_VARIANT).a $(EXTRA_SETJMP_LIBRARIES)
STRING_LIBRARIES = $(CONFIGURATION_BUILD_DIR)/libstring_i386_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libstring_x86_64_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libstring_arm_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libstring_arm64_$(CURRENT_VARIANT).a $(EXTRA_STRING_LIBRARIES)
UCONTEXT_LIBRARIES = $(CONFIGURATION_BUILD_DIR)/libucontext_i386_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libucontext_x86_64_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libucontext_arm64_$(CURRENT_VARIANT).a
TIMINGSAFE_LIBRARIES = $(CONFIGURATION_BUILD_DIR)/libtimingsafe_x86_64_$(CURRENT_VARIANT).a $(CONFIGURATION_BUILD_DIR)/libtimingsafe_arm64_$(CURRENT_VARIANT).a $(EXTRA_TIMINGSAFE_LIBRARIES)

IS_ZIPPERED = YES

SIMULATOR_LDFLAGS =
SIMULATOR_LDFLAGS[sdk=macosx*] = -Wl,-simulator_support

OTHER_LDFLAGS = $(OTHER_LDFLAGS_$(TARGET_NAME)) $(CR_LDFLAGS)
OTHER_LDFLAGS_libsystem_platform = -all_load $(PLATFORM_LIBRARIES) -umbrella System -L$(SDK_INSTALL_ROOT)/usr/lib/system $(ldyld) $(lsystem_kernel) -Wl,-alias_list,$(SRCROOT)/xcodeconfig/libplatform.aliases,$(DIRTY_DATA_LDFLAGS) $(SIMULATOR_LDFLAGS)

OTHER_LIBTOOLFLAGS = $(OTHER_LIBTOOLFLAGS_$(TARGET_NAME))
OTHER_LIBTOOLFLAGS_libplatform_simple_dyld = $(CONFIGURATION_BUILD_DIR)/libsimple_$(CURRENT_VARIANT).a
OTHER_LIBTOOLFLAGS_libplatform_string_dyld = $(CONFIGURATION_BUILD_DIR)/libstring_$(CURRENT_VARIANT).a
OTHER_LIBTOOLFLAGS_libplatform_os_dyld =
OTHER_LIBTOOLFLAGS_libplatform_dyld = $(PLATFORM_LIBRARIES)
OTHER_LIBTOOLFLAGS_libplatform_static = $(PLATFORM_LIBRARIES)
OTHER_LIBTOOLFLAGS_libatomics = $(ATOMICS_LIBRARIES)
OTHER_LIBTOOLFLAGS_libcachecontrol = $(CACHECONTROL_LIBRARIES)
OTHER_LIBTOOLFLAGS_libos = $(OS_LIBRARIES_$(CURRENT_VARIANT))
OTHER_LIBTOOLFLAGS_libsetjmp = $(SETJMP_LIBRARIES)
OTHER_LIBTOOLFLAGS_libstring = $(STRING_LIBRARIES)
OTHER_LIBTOOLFLAGS_libucontext = $(UCONTEXT_LIBRARIES)
OTHER_LIBTOOLFLAGS_libtimingsafe = $(TIMINGSAFE_LIBRARIES)

lsystem_kernel = -lsystem_kernel
lsystem_kernel[sdk=iphonesimulator*] = -lsystem_sim_kernel

// rdar://problem/46882983&54282933
// On macOS, to support the i386 watchOS Simulator, we will continue building
// libplatform with an i386 slice for the foreseeable future, even though the
// rest of the OS has dropped i386. (This also applies to libpthread and
// libsyscall). Normally, dylibs with any dependency on another dylib need
// to link libdyld for lazy stub binding. libdyld has many dependencies, so
// that would create a dependency cycle that leads to the whole libSystem
// umbrella keeping an i386 slice. Instead, ld64 has changed so that the
// i386 simulator_support slice of libplatform doesn't use lazy binding and so
// doesn't need -ldyld.
// So, to break the dependency cycle, macOS libplatform will not link libdyld.
// All other platforms (including DriverKit on macOS) will continue to link
// libdyld.
ldyld = -ldyld
ldyld[sdk=macos*] =

