#!/usr/bin/env python3

from __future__ import absolute_import
from __future__ import print_function
import sys, getopt, collections, subprocess, argparse, math
from operator import itemgetter
import json 

# colors

class color:
   PURPLE = '\033[95m'
   CYAN = '\033[96m'
   DARKCYAN = '\033[36m'
   BLUE = '\033[94m'
   GREEN = '\033[92m'
   YELLOW = '\033[93m'
   RED = '\033[91m'
   BOLD = '\033[1m'
   UNDERLINE = '\033[4m'
   END = '\033[0m'

def print_bold (s):
    print(color.BOLD + s + color.END)

def to_bold (s):
    return color.BOLD + s + color.END


# Debug code
DBG_FUNC_END                        = 0x2
DBG_FUNC_START                      = 0x1
kIOHIDDebugCode_DispatchHIDEvent    = 0x5230048
kIOHIDDebugCode_HandleReport        = 0x523003C
kHIDDK_Dev_InputReport              = 0x523C008
kHIDDK_Dev_AddReport                = 0x523C01C
kHID_ES_Service_Callback            = 0x5238100
kHID_ES_Client_QueueCallback        = 0x5238080
kHID_ES_ClientsEnqueue              = 0x523804c
kHID_ES_ClientsEnqueueEnd           = (0x523804c | DBG_FUNC_END)
kHID_ES_Session_Filters_Start       = (0x5238148 | DBG_FUNC_START)
kHID_ES_Session_Filters_End         = (0x5238148 | DBG_FUNC_END)
kHID_ES_Service_Filters_Start       = (0x523810c | DBG_FUNC_START)
kHID_ES_Service_Filters_End         = (0x523810c | DBG_FUNC_END)
kHID_ES_FiltersClientsDone          = 0x5238044
     
traceTimeDelta = 0

HIDEventTypeToStr = [
    'kIOHIDEventTypeNULL',
    'kIOHIDEventTypeVendorDefined',
    'kIOHIDEventTypeButton',                  
    'kIOHIDEventTypeKeyboard',                     
    'kIOHIDEventTypeTranslation',
    'kIOHIDEventTypeRotation',
    'kIOHIDEventTypeScroll',
    'kIOHIDEventTypeScale',           
    'kIOHIDEventTypeZoom',                       
    'kIOHIDEventTypeVelocity',                     
    'kIOHIDEventTypeOrientation',
    'kIOHIDEventTypeDigitizer',
    'kIOHIDEventTypeAmbientLightSensor',
    'kIOHIDEventTypeAccelerometer',      
    'kIOHIDEventTypeProximity',                    
    'kIOHIDEventTypeTemperature',
    'kIOHIDEventTypeNavigationSwipe',
    'kIOHIDEventTypePointer',
    'kIOHIDEventTypeProgress',   
    'kIOHIDEventTypeMultiAxisPointer',      
    'kIOHIDEventTypeGyro',
    'kIOHIDEventTypeCompass',
    'kIOHIDEventTypeZoomToggle',
    'kIOHIDEventTypeDockSwipe',
    'kIOHIDEventTypeSymbolicHotKey',   
    'kIOHIDEventTypePower',                      
    'kIOHIDEventTypeLED',                          
    'kIOHIDEventTypeFluidTouchGesture',
    'kIOHIDEventTypeBoundaryScroll',
    'kIOHIDEventTypeBiometric',
    'kIOHIDEventTypeUnicode',            
    'kIOHIDEventTypeAtmosphericPressure',
    'kIOHIDEventTypeForce',
    'kIOHIDEventTypeMotionActivity',
    'kIOHIDEventTypeMotionGesture',
    'kIOHIDEventTypeGameController',        
    'kIOHIDEventTypeHumidity',                     
    'kIOHIDEventTypeCollection',
    'kIOHIDEventTypeBrightness',
    'kIOHIDEventTypeGenericGesture',
]

HIDTraceCodes = [
     kIOHIDDebugCode_DispatchHIDEvent,
     kIOHIDDebugCode_HandleReport,
     kHID_ES_Service_Callback,
     kHID_ES_ClientsEnqueueEnd,
     kHID_ES_Client_QueueCallback,
     kHID_ES_Session_Filters_Start,
     kHID_ES_Session_Filters_End,
     kHID_ES_Service_Filters_Start,
     kHID_ES_Service_Filters_End,
     kHID_ES_FiltersClientsDone
]

verbose    = False
eventTrace = collections.OrderedDict()

def  log (data):
    if  verbose:
        sys.stderr.write(data+"\n")

def  extract_trace (trace):
    log ("Extracting trace")
    hidTrace = []
    for probe in trace:
        try:
            entry = json.loads(probe)
        except:
            log ("unable to parse: %s" % probe)
            continue
        if (entry["debugid"] >> 16) != 0x0523:
            continue
        if entry["debugid"] in HIDTraceCodes:
            hidTrace.append(entry)

    log ("Extracted trace: length(%d)" % len(hidTrace))
    return hidTrace

def  process_trace (trace):
    log ("Processing trace...")
    events = collections.OrderedDict()
    reports = collections.OrderedDict()
    for probe in trace:
        if probe["debugid"] == kIOHIDDebugCode_HandleReport:
            timestamp = probe["args"][1]
            reports[timestamp] = probe
        else:
            timestamp = int (probe["args"][0])
            event = events.setdefault(timestamp, [])
            event.append(probe)
    for  timestamp in events:
        if timestamp in reports:
            events[timestamp].append(reports[timestamp])

    log ("Extracted event count: %d" % len(events))
    return events   

def  process_events (eventsDict):
    log ("Processing Events")
    events = []
    for  timestamp in eventsDict:
        event = Event.createEvent(timestamp, eventsDict[timestamp])
        if event: 
            events.append(event)
    return events

    events = collections.OrderedDict()
    reports = ollections.OrderedDict()
    for probe in trace:
        if probe["debugid"] == kIOHIDDebugCode_HandleReport:
            timestamp = probe["args"][1]
            reports[timestamp] = probe
        else:
            timestamp = int (probe["args"][0])
            event = []
            if events[timestamp]:
                event = events[timestamp]
            event.append(probe)
            events[timestamp] = event
    for  timestamp in events:
        if reports[timestamp]:
            events[timestamp].append(reports[timestamp])

    for  timestamp in events:
        if reports[timestamp]:
            events[timestamp].append(reports[timestamp])

    log ("Processed event count: %d" % len(events))
    return events   

class Event(object):
    
    @classmethod
    def createEvent(cls, timestamp, probes):
        instance =  cls(timestamp, probes);    
        if instance.userTime and instance.finalTime:
            return instance 
        return None

    def __init__(self, timestamp, probes):
        global traceTimeDelta
        self.timestamp = timestamp
        self.probes = probes
        self.reportTime = None
        self.userTime = None
        self.kernelTime = None
        self.filtersClientDoneTime = None
        self.serviceFilterStart = None
        self.serviceFilterEnd = None
        self.sessionFilterStart = None
        self.sessionFilterEnd = None
        self.finalTime = None
        self.type = None
        self.service = None
        self.clients = []
        self.startTime = 0
        self.usagePair = 0 # 32-bit usage page/usage pair (vendor-defined events only)
        for probe in self.probes:
           
            if probe["debugid"] == kIOHIDDebugCode_HandleReport:
                self.reportTime = int(probe["timestampns"])
            elif probe["debugid"] == kIOHIDDebugCode_DispatchHIDEvent:
                self.kernelTime = int(probe["timestampns"])
            elif probe["debugid"] == kHID_ES_Service_Callback:
                self.userTime = int(probe["timestampns"])
                self.type = int(probe["args"][2])
                self.service = int(probe["args"][1])
            elif probe["debugid"] == kHID_ES_ClientsEnqueueEnd:
                self.finalTime = int(probe["timestampns"])
            elif probe["debugid"] == kHID_ES_Session_Filters_Start:
                self.sessionFilterStart = int(probe["timestampns"])
            elif probe["debugid"] == kHID_ES_Session_Filters_End:
                self.sessionFilterEnd = int(probe["timestampns"])
            elif probe["debugid"] == kHID_ES_Service_Filters_Start:
                self.serviceFilterStart = int(probe["timestampns"])
                self.usagePair = int(probe["args"][3]) & 0xffffffff
            elif probe["debugid"] == kHID_ES_Service_Filters_End:
                self.serviceFilterEnd = int(probe["timestampns"])
            elif probe["debugid"] == kHID_ES_FiltersClientsDone:
                self.filtersClientDoneTime = int(probe["timestampns"])
            elif probe["debugid"] == kHID_ES_Client_QueueCallback and "execname" in probe:
                self.clients.append(probe["execname"])

        if self.userTime:
            self.startTime = self.userTime
        if self.kernelTime:
            self.startTime = self.kernelTime
        if self.reportTime:
            self.startTime = self.reportTime

    def service(self):
        return self.service

    def type(self):
        return self.type

    def typeAsString(self):
        return HIDEventTypeToStr[self.type]
                     
    def timestamp(self):
        return self.timestamp

    def reportTime(self):
        return self.reportTime  

    def kernelTime(self):
        return self.kernelTime 
        
    def userTime(self):
        return self.userTime 

    def finalTime(self):
        return self.finalTime

    def timeDeltaToClient(self, client):
        for probe in self.probes:
            if probe["debugid"] == kHID_ES_Client_QueueCallback and "execname" in probe: 
                if client == probe['execname'] :
                   return (int(probe["timestampns"]) - self.startTime) / 1000 

    def startTime(self):
        return startTime

    def timeDelta(self, type):
        if 'touser' in type:
            return (self.userTime - self.startTime)  / 1000
        if 'inuser' in type:
            return (self.finalTime - self.userTime)  / 1000
        if 'total' in type:
            return (self.finalTime - self.startTime) / 1000   
        if 'session-filter' in type:
            return (self.sessionFilterEnd - self.sessionFilterStart) / 1000
        if 'service-filter' in type:
            return (self.serviceFilterEnd - self.serviceFilterStart) / 1000
        if 'es-host' in type:
            return (self.filtersClientDoneTime - self.startTime) / 1000
        return None

    def description(self):
        return ("0x%016x  0x%02x  0x%016x  %-8d  %-8d  %-8d" % (self.timestamp , self.type, self.service, 
            self.timeDelta('touser'), self.timeDelta('inuser'), self.timeDelta('total')))

    def clients(self):
        return self.clients

def process_interval_stats (entervals):
    entervals.sort()
    minStr = "  min(us): "
    for i in range (0, min(5,len(entervals))):
        minStr +=  "%8.1f " % (entervals[i])

    print(minStr)

    maxStr = "  max(us): " 
    for i in range (len(entervals) - min(len(entervals),5), len(entervals)):
        maxStr += "%8.1f " % (entervals[i])

    print(maxStr)

    averageStr = "  average: " 

    average = 0;
    if len (entervals) < 10:
        for i in range (0,len (entervals)):
            average += entervals[i]
        averageStr += "100%%: %0.1f " % (average / len (entervals))
    else:
        for i in range (0,(len(entervals) * 95) // 100):
            average += entervals[i]
        averageStr += "95%%: %0.1f " % (average / ((len(entervals) * 95) / 100))

        average = 0;
        for i in range (0,(len(entervals) * 50) // 100):
            average += entervals[i]
        averageStr += "50%%: %0.1f " % (average / ((len(entervals) * 50) / 100))
    print(averageStr)


def process_client_event_stats (events, filter, client):
    filerEvent = False
    eventTypes = {}
    total  = []
    log ("Process client event stats (client:%s)" % client)
    for event in events:
        if filter:
             filerEvent = eval(filter)
        if filerEvent:
            continue 
        if client not in event.clients:
            continue

        # determine count of each event type
        if event.typeAsString() == 'kIOHIDEventTypeVendorDefined':
            # count vendor defined events on a per-usage basis
            countKey  = event.usagePair
            countDict = eventTypes.setdefault(event.type, {})
        else:
            countKey  = event.type
            countDict = eventTypes

        count = 1
        if countKey in countDict:
            count = countDict[countKey] + 1
        countDict[countKey] = count

        # determine all event time intervals
        total.append(event.timeDeltaToClient(client)) 
 
    print_bold ("\nProcess: %s" % client)
    print ("Events:")
    for key in eventTypes:
        if HIDEventTypeToStr[key] == 'kIOHIDEventTypeVendorDefined':
            print("  type: %2d (%s)" % (key, HIDEventTypeToStr[key]))
            counts = eventTypes[key]
            for usagePair in counts:
                usagePage = (usagePair & 0xffff0000) >> 16
                usage     = (usagePair & 0x0000ffff)
                print("    usagePage: 0x%04x usage: 0x%04x   count: %8d" % (usagePage, usage, counts[usagePair]))
        else:
            print("  type: %2d count: %8d (%s)" % (key, eventTypes[key], HIDEventTypeToStr[key]))

    print("Time interval (Kernel to Client):")
    process_interval_stats(total)

def process_event_stats (events, filter):
    filerEvent = False
    eventTypes = {}
    touser = []
    inuser = []
    sessionFilter = []
    serviceFilter = []
    eshost = []
    total  = []
    clients = []
    log ("Process system event stats (len:%d)" % len(events))
    for event in events:
        if filter:
             filerEvent = eval(filter)
        if filerEvent:
            continue 

        # determine count of each event type
        if event.typeAsString() == 'kIOHIDEventTypeVendorDefined':
            # count vendor defined events on a per-usage basis
            countKey  = event.usagePair
            countDict = eventTypes.setdefault(event.type, {})
        else:
            countKey  = event.type
            countDict = eventTypes

        count = 1
        if countKey in countDict:
            count = countDict[countKey] + 1
        countDict[countKey] = count

        # determine all event time intervals
        touser.append(event.timeDelta('touser'))
        inuser.append(event.timeDelta('inuser'))
        total.append(event.timeDelta('total'))
        sessionFilter.append(event.timeDelta('session-filter'))
        serviceFilter.append(event.timeDelta('service-filter'))
        eshost.append(event.timeDelta('es-host'))
        clients.extend(event.clients)

    print_bold("Events System Host Process:")
    print("Events:")
    for key in eventTypes:
        if HIDEventTypeToStr[key] == 'kIOHIDEventTypeVendorDefined':
            print("  type: %2d (%s)" % (key, HIDEventTypeToStr[key]))
            counts = eventTypes[key]
            for usagePair in counts:
                usagePage = (usagePair & 0xffff0000) >> 16
                usage     = (usagePair & 0x0000ffff)
                print("    usagePage: 0x%04x usage: 0x%04x   count: %8d" % (usagePage, usage, counts[usagePair]))
        else:
            print("  type: %2d count: %8d (%s)" % (key, eventTypes[key], HIDEventTypeToStr[key]))
    
    print("Time interval (Kernel to User):")
    process_interval_stats(touser)
    print("Time interval (Session Filters):")
    process_interval_stats(sessionFilter)
    print("Time interval (Service Filters):")
    process_interval_stats(serviceFilter)
    print("Time interval (Event System):")
    process_interval_stats(inuser)
    print("Time interval (kernel to backboard/WindowServer):")
    process_interval_stats(eshost)
    print("Time interval (Kernel to Clients):")
    process_interval_stats(total)

    for client in set(clients):
        process_client_event_stats (events, filter, client)
 
def  main (argv):

    global verbose
    extract = False
    process = True
    filter = None
    stats = None
    client = None
    opts, args = getopt.getopt(argv, "f:vesc:h", ["extract", "help", "verbose", "filter", "stats", "client"])
    for opt, arg in opts:
        if opt in ("-e", "--extract"):
            extract = True
        if opt in ("-v", "--verbose"):
            verbose = True
        if opt in ("-s", "--stats"):
            stats = True
        if opt in ("-c", "--client"):
            client = arg
        if opt in ("-f", "--filter"):
            filter = arg
        if opt in ("-h", "--help"):
            print("Extract HID events info from  artrace/tailspin/ktrace")
            print("Usage:")
            print("     hidartraceutil [-e event_timestamp] [-c client_process_name,...] [-h] [-r]\n")
            print("Flags:")
            print("     -e,--extract  extract IOHID trace probes")
            print("     -c,--client   print time of event delivery to specific client process")
            print("     -s,--stats    print summary of event types/count/latencies")
            print("     -f,--filter   filter out predciate\n")
            print("Examples:")
            print("     hidartraceutil /tmp/trace001.artrace")
            print("     hidartraceutil -s /tmp/trace001.artrace")
            print("     hidartraceutil -e /tmp/trace001.artrace > /tmp/trace001.ndson")
            print("     cat /tmp/trace001.ndson | hidartraceutil")
            print("     cat /tmp/trace001.ndson | hidartraceutil -s")
            print("     cat /tmp/trace001.ndson | hidartraceutil -f \'event.type != 0x3\'")
            print("     cat /tmp/trace001.ndson | hidartraceutil -f \'event.timeDeltaToClient(client) < 1000\'")
            print("Filter predicate:")
            print("     Filter predicate is an expression that determine if event should be included in results.")
            print("     if filter predicate return True - event filtered out, if Flase - included in results")
            print("     Filter predicate usually evaluate \"event\" object")
            print("     event.type                       numeric value of IOHIDEventType")
            print("     event.typeAsString               String representation of event type")
            print("     event.timestamp                  event timestamp")
            print("     event.clients                    list of the client processes to which event was delivered")
            print("     event.timeDeltaToClient(client)  event time delivery to the \"client\"  in us")
            print("Other:")
            print("     artrace  --trace-ktrace-class 5 (collect HID trace point used by hidartraceutil)")

            return

    traceData = None
    if args:
        log ("Loading trace (file:%s)" % (args[0]))

        if args[0].endswith("tailspin") or args[0].endswith("artrace") or args[0].endswith("ktrace") or args[0].endswith("atrc"):
            traceData = subprocess.check_output("ktrace trace  --json-64 --ndjson -t -N -R \"%s\"" % (args[0]), shell=True, universal_newlines=True).splitlines()


    if  not traceData :
        log ("Reading trace from stdin")
        traceData = sys.stdin

    if extract:
        hidTrace = extract_trace (traceData);
        log ("Print trace (length:%d)" % len(hidTrace))
        for probe in hidTrace:
            print(json.dumps(probe));
        return

    hidTrace = extract_trace (traceData);
    events = process_events (process_trace (hidTrace))

    if stats:
        process_event_stats (events, filter)
        return 

    header = "%-18s  %-4s  %-18s  %-8s  %-8s  %-8s" % ('timestamp','type','service', 'touser','inuser','total')
    if client: 
        header +=  "  %-8s" % ('client(%s)' % (client)) 
    

    print (header)
    for event in events:
        filerEvent = False
        if filter:
            filerEvent = eval(filter)
        if not filerEvent:
            eventStr = "0x%016x  0x%02x  0x%016x  %-8d  %-8d  %-8d" % (event.timestamp , event.type, event.service, 
                event.timeDelta('touser'), event.timeDelta('inuser'), event.timeDelta('total'))
            if client and client in event.clients:
                eventStr +="  %-8d" % event.timeDeltaToClient(client) 
            print(eventStr)


if __name__ == "__main__":
    main (sys.argv[1:])


